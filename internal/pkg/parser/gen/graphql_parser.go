// Code generated from /Users/mpoindexter/dev/gq/grammar/Graphql.g4 by ANTLR 4.7.1. DO NOT EDIT.

package gen // Graphql
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 45, 890,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 7, 4, 157, 10, 4, 12, 4, 14, 4, 160, 11,
	4, 3, 4, 3, 4, 3, 5, 3, 5, 7, 5, 166, 10, 5, 12, 5, 14, 5, 169, 11, 5,
	3, 5, 3, 5, 3, 6, 3, 6, 7, 6, 175, 10, 6, 12, 6, 14, 6, 178, 11, 6, 3,
	6, 3, 6, 3, 7, 3, 7, 7, 7, 184, 10, 7, 12, 7, 14, 7, 187, 11, 7, 3, 7,
	3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 6, 10, 200,
	10, 10, 13, 10, 14, 10, 201, 3, 11, 3, 11, 3, 11, 5, 11, 207, 10, 11, 3,
	12, 3, 12, 6, 12, 211, 10, 12, 13, 12, 14, 12, 212, 3, 12, 3, 12, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 5, 15, 231, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16,
	3, 16, 3, 16, 3, 16, 3, 16, 5, 16, 242, 10, 16, 3, 17, 3, 17, 3, 17, 3,
	18, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 5, 20, 255, 10, 20,
	3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 5, 23, 269, 10, 23, 3, 24, 3, 24, 3, 24, 5, 24, 274, 10, 24,
	3, 24, 5, 24, 277, 10, 24, 3, 24, 5, 24, 280, 10, 24, 3, 24, 3, 24, 5,
	24, 284, 10, 24, 3, 25, 3, 25, 6, 25, 288, 10, 25, 13, 25, 14, 25, 289,
	3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 5, 26, 298, 10, 26, 3, 27, 3,
	27, 6, 27, 302, 10, 27, 13, 27, 14, 27, 303, 3, 27, 3, 27, 3, 28, 3, 28,
	3, 28, 5, 28, 311, 10, 28, 3, 29, 5, 29, 314, 10, 29, 3, 29, 3, 29, 5,
	29, 318, 10, 29, 3, 29, 5, 29, 321, 10, 29, 3, 29, 5, 29, 324, 10, 29,
	3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 5, 31, 332, 10, 31, 3, 32, 3,
	32, 5, 32, 336, 10, 32, 3, 32, 5, 32, 339, 10, 32, 3, 32, 3, 32, 3, 33,
	3, 33, 3, 33, 3, 33, 5, 33, 347, 10, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3,
	35, 3, 35, 3, 35, 3, 36, 3, 36, 6, 36, 358, 10, 36, 13, 36, 14, 36, 359,
	3, 37, 3, 37, 3, 38, 5, 38, 365, 10, 38, 3, 38, 3, 38, 3, 38, 3, 38, 5,
	38, 371, 10, 38, 3, 39, 5, 39, 374, 10, 39, 3, 39, 3, 39, 5, 39, 378, 10,
	39, 3, 39, 3, 39, 6, 39, 382, 10, 39, 13, 39, 14, 39, 383, 3, 39, 3, 39,
	3, 40, 5, 40, 389, 10, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 5, 41, 401, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 409, 10, 42, 3, 43, 5, 43, 412, 10, 43, 3, 43, 3,
	43, 3, 43, 5, 43, 417, 10, 43, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 423,
	10, 44, 3, 45, 5, 45, 426, 10, 45, 3, 45, 3, 45, 3, 45, 5, 45, 431, 10,
	45, 3, 45, 5, 45, 434, 10, 45, 3, 45, 5, 45, 437, 10, 45, 3, 46, 3, 46,
	3, 46, 3, 46, 5, 46, 443, 10, 46, 3, 46, 5, 46, 446, 10, 46, 3, 46, 5,
	46, 449, 10, 46, 3, 47, 3, 47, 3, 47, 5, 47, 454, 10, 47, 3, 47, 6, 47,
	457, 10, 47, 13, 47, 14, 47, 458, 3, 47, 3, 47, 3, 47, 7, 47, 464, 10,
	47, 12, 47, 14, 47, 467, 11, 47, 3, 48, 3, 48, 7, 48, 471, 10, 48, 12,
	48, 14, 48, 474, 11, 48, 3, 48, 3, 48, 3, 49, 5, 49, 479, 10, 49, 3, 49,
	3, 49, 5, 49, 483, 10, 49, 3, 49, 3, 49, 3, 49, 5, 49, 488, 10, 49, 3,
	50, 3, 50, 6, 50, 492, 10, 50, 13, 50, 14, 50, 493, 3, 50, 3, 50, 3, 51,
	5, 51, 499, 10, 51, 3, 51, 3, 51, 3, 51, 3, 51, 5, 51, 505, 10, 51, 3,
	51, 5, 51, 508, 10, 51, 3, 52, 5, 52, 511, 10, 52, 3, 52, 3, 52, 3, 52,
	5, 52, 516, 10, 52, 3, 52, 5, 52, 519, 10, 52, 3, 53, 3, 53, 3, 53, 3,
	53, 5, 53, 525, 10, 53, 3, 53, 5, 53, 528, 10, 53, 3, 54, 5, 54, 531, 10,
	54, 3, 54, 3, 54, 3, 54, 5, 54, 536, 10, 54, 3, 54, 3, 54, 3, 55, 3, 55,
	3, 55, 3, 55, 5, 55, 544, 10, 55, 3, 55, 5, 55, 547, 10, 55, 3, 56, 3,
	56, 3, 56, 3, 57, 3, 57, 5, 57, 554, 10, 57, 3, 57, 3, 57, 3, 57, 3, 57,
	3, 57, 7, 57, 561, 10, 57, 12, 57, 14, 57, 564, 11, 57, 3, 58, 5, 58, 567,
	10, 58, 3, 58, 3, 58, 3, 58, 5, 58, 572, 10, 58, 3, 58, 3, 58, 3, 59, 3,
	59, 3, 59, 3, 59, 5, 59, 580, 10, 59, 3, 59, 5, 59, 583, 10, 59, 3, 60,
	3, 60, 6, 60, 587, 10, 60, 13, 60, 14, 60, 588, 3, 60, 3, 60, 3, 61, 5,
	61, 594, 10, 61, 3, 61, 3, 61, 5, 61, 598, 10, 61, 3, 62, 5, 62, 601, 10,
	62, 3, 62, 3, 62, 3, 62, 5, 62, 606, 10, 62, 3, 62, 3, 62, 3, 63, 3, 63,
	3, 63, 3, 63, 5, 63, 614, 10, 63, 3, 63, 5, 63, 617, 10, 63, 3, 64, 3,
	64, 6, 64, 621, 10, 64, 13, 64, 14, 64, 622, 3, 64, 3, 64, 3, 65, 5, 65,
	628, 10, 65, 3, 65, 3, 65, 3, 65, 3, 65, 5, 65, 634, 10, 65, 3, 65, 3,
	65, 3, 65, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 7, 67,
	647, 10, 67, 12, 67, 14, 67, 650, 11, 67, 3, 68, 3, 68, 5, 68, 654, 10,
	68, 3, 68, 3, 68, 3, 68, 5, 68, 659, 10, 68, 3, 68, 3, 68, 3, 68, 3, 68,
	5, 68, 665, 10, 68, 3, 68, 3, 68, 5, 68, 669, 10, 68, 3, 68, 5, 68, 672,
	10, 68, 3, 68, 3, 68, 3, 68, 5, 68, 677, 10, 68, 3, 68, 3, 68, 5, 68, 681,
	10, 68, 3, 69, 5, 69, 684, 10, 69, 3, 69, 3, 69, 3, 69, 5, 69, 689, 10,
	69, 3, 69, 5, 69, 692, 10, 69, 3, 69, 5, 69, 695, 10, 69, 3, 69, 5, 69,
	698, 10, 69, 3, 69, 3, 69, 5, 69, 702, 10, 69, 3, 69, 5, 69, 705, 10, 69,
	3, 69, 5, 69, 708, 10, 69, 3, 69, 5, 69, 711, 10, 69, 3, 69, 5, 69, 714,
	10, 69, 3, 69, 5, 69, 717, 10, 69, 3, 69, 5, 69, 720, 10, 69, 5, 69, 722,
	10, 69, 3, 70, 5, 70, 725, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 730, 10,
	70, 3, 70, 3, 70, 3, 70, 5, 70, 735, 10, 70, 3, 70, 3, 70, 5, 70, 739,
	10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 744, 10, 70, 3, 70, 5, 70, 747, 10,
	70, 3, 70, 3, 70, 5, 70, 751, 10, 70, 3, 70, 5, 70, 754, 10, 70, 5, 70,
	756, 10, 70, 3, 71, 5, 71, 759, 10, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5,
	71, 765, 10, 71, 3, 71, 5, 71, 768, 10, 71, 3, 71, 5, 71, 771, 10, 71,
	3, 71, 3, 71, 5, 71, 775, 10, 71, 3, 71, 5, 71, 778, 10, 71, 3, 71, 5,
	71, 781, 10, 71, 3, 71, 3, 71, 3, 71, 5, 71, 786, 10, 71, 3, 71, 5, 71,
	789, 10, 71, 5, 71, 791, 10, 71, 3, 72, 5, 72, 794, 10, 72, 3, 72, 3, 72,
	3, 72, 5, 72, 799, 10, 72, 3, 72, 3, 72, 3, 72, 5, 72, 804, 10, 72, 3,
	72, 3, 72, 5, 72, 808, 10, 72, 3, 72, 3, 72, 3, 72, 5, 72, 813, 10, 72,
	3, 72, 5, 72, 816, 10, 72, 3, 72, 5, 72, 819, 10, 72, 3, 73, 5, 73, 822,
	10, 73, 3, 73, 3, 73, 3, 73, 5, 73, 827, 10, 73, 3, 73, 3, 73, 3, 73, 5,
	73, 832, 10, 73, 3, 73, 3, 73, 5, 73, 836, 10, 73, 3, 73, 3, 73, 3, 73,
	5, 73, 841, 10, 73, 3, 73, 5, 73, 844, 10, 73, 3, 73, 5, 73, 847, 10, 73,
	3, 74, 5, 74, 850, 10, 74, 3, 74, 3, 74, 3, 74, 5, 74, 855, 10, 74, 3,
	74, 5, 74, 858, 10, 74, 3, 74, 5, 74, 861, 10, 74, 3, 74, 3, 74, 5, 74,
	865, 10, 74, 3, 74, 5, 74, 868, 10, 74, 3, 74, 5, 74, 871, 10, 74, 3, 74,
	5, 74, 874, 10, 74, 3, 74, 5, 74, 877, 10, 74, 5, 74, 879, 10, 74, 3, 75,
	5, 75, 882, 10, 75, 3, 75, 5, 75, 885, 10, 75, 3, 75, 5, 75, 888, 10, 75,
	3, 75, 2, 5, 92, 112, 132, 76, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58,
	60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,
	96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124,
	126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 2, 5, 3, 2,
	21, 23, 3, 2, 20, 34, 3, 2, 42, 43, 2, 1001, 2, 150, 3, 2, 2, 2, 4, 152,
	3, 2, 2, 2, 6, 154, 3, 2, 2, 2, 8, 163, 3, 2, 2, 2, 10, 172, 3, 2, 2, 2,
	12, 181, 3, 2, 2, 2, 14, 190, 3, 2, 2, 2, 16, 194, 3, 2, 2, 2, 18, 199,
	3, 2, 2, 2, 20, 203, 3, 2, 2, 2, 22, 208, 3, 2, 2, 2, 24, 216, 3, 2, 2,
	2, 26, 220, 3, 2, 2, 2, 28, 230, 3, 2, 2, 2, 30, 241, 3, 2, 2, 2, 32, 243,
	3, 2, 2, 2, 34, 246, 3, 2, 2, 2, 36, 249, 3, 2, 2, 2, 38, 254, 3, 2, 2,
	2, 40, 256, 3, 2, 2, 2, 42, 258, 3, 2, 2, 2, 44, 268, 3, 2, 2, 2, 46, 283,
	3, 2, 2, 2, 48, 285, 3, 2, 2, 2, 50, 293, 3, 2, 2, 2, 52, 299, 3, 2, 2,
	2, 54, 310, 3, 2, 2, 2, 56, 313, 3, 2, 2, 2, 58, 325, 3, 2, 2, 2, 60, 328,
	3, 2, 2, 2, 62, 333, 3, 2, 2, 2, 64, 342, 3, 2, 2, 2, 66, 350, 3, 2, 2,
	2, 68, 352, 3, 2, 2, 2, 70, 357, 3, 2, 2, 2, 72, 361, 3, 2, 2, 2, 74, 370,
	3, 2, 2, 2, 76, 373, 3, 2, 2, 2, 78, 388, 3, 2, 2, 2, 80, 400, 3, 2, 2,
	2, 82, 408, 3, 2, 2, 2, 84, 411, 3, 2, 2, 2, 86, 418, 3, 2, 2, 2, 88, 425,
	3, 2, 2, 2, 90, 438, 3, 2, 2, 2, 92, 450, 3, 2, 2, 2, 94, 468, 3, 2, 2,
	2, 96, 478, 3, 2, 2, 2, 98, 489, 3, 2, 2, 2, 100, 498, 3, 2, 2, 2, 102,
	510, 3, 2, 2, 2, 104, 520, 3, 2, 2, 2, 106, 530, 3, 2, 2, 2, 108, 539,
	3, 2, 2, 2, 110, 548, 3, 2, 2, 2, 112, 551, 3, 2, 2, 2, 114, 566, 3, 2,
	2, 2, 116, 575, 3, 2, 2, 2, 118, 584, 3, 2, 2, 2, 120, 593, 3, 2, 2, 2,
	122, 600, 3, 2, 2, 2, 124, 609, 3, 2, 2, 2, 126, 618, 3, 2, 2, 2, 128,
	627, 3, 2, 2, 2, 130, 638, 3, 2, 2, 2, 132, 640, 3, 2, 2, 2, 134, 680,
	3, 2, 2, 2, 136, 721, 3, 2, 2, 2, 138, 755, 3, 2, 2, 2, 140, 790, 3, 2,
	2, 2, 142, 818, 3, 2, 2, 2, 144, 846, 3, 2, 2, 2, 146, 878, 3, 2, 2, 2,
	148, 881, 3, 2, 2, 2, 150, 151, 9, 2, 2, 2, 151, 3, 3, 2, 2, 2, 152, 153,
	5, 26, 14, 2, 153, 5, 3, 2, 2, 2, 154, 158, 7, 3, 2, 2, 155, 157, 5, 28,
	15, 2, 156, 155, 3, 2, 2, 2, 157, 160, 3, 2, 2, 2, 158, 156, 3, 2, 2, 2,
	158, 159, 3, 2, 2, 2, 159, 161, 3, 2, 2, 2, 160, 158, 3, 2, 2, 2, 161,
	162, 7, 4, 2, 2, 162, 7, 3, 2, 2, 2, 163, 167, 7, 3, 2, 2, 164, 166, 5,
	30, 16, 2, 165, 164, 3, 2, 2, 2, 166, 169, 3, 2, 2, 2, 167, 165, 3, 2,
	2, 2, 167, 168, 3, 2, 2, 2, 168, 170, 3, 2, 2, 2, 169, 167, 3, 2, 2, 2,
	170, 171, 7, 4, 2, 2, 171, 9, 3, 2, 2, 2, 172, 176, 7, 5, 2, 2, 173, 175,
	5, 14, 8, 2, 174, 173, 3, 2, 2, 2, 175, 178, 3, 2, 2, 2, 176, 174, 3, 2,
	2, 2, 176, 177, 3, 2, 2, 2, 177, 179, 3, 2, 2, 2, 178, 176, 3, 2, 2, 2,
	179, 180, 7, 6, 2, 2, 180, 11, 3, 2, 2, 2, 181, 185, 7, 5, 2, 2, 182, 184,
	5, 16, 9, 2, 183, 182, 3, 2, 2, 2, 184, 187, 3, 2, 2, 2, 185, 183, 3, 2,
	2, 2, 185, 186, 3, 2, 2, 2, 186, 188, 3, 2, 2, 2, 187, 185, 3, 2, 2, 2,
	188, 189, 7, 6, 2, 2, 189, 13, 3, 2, 2, 2, 190, 191, 5, 26, 14, 2, 191,
	192, 7, 7, 2, 2, 192, 193, 5, 28, 15, 2, 193, 15, 3, 2, 2, 2, 194, 195,
	5, 26, 14, 2, 195, 196, 7, 7, 2, 2, 196, 197, 5, 30, 16, 2, 197, 17, 3,
	2, 2, 2, 198, 200, 5, 20, 11, 2, 199, 198, 3, 2, 2, 2, 200, 201, 3, 2,
	2, 2, 201, 199, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 19, 3, 2, 2, 2,
	203, 204, 7, 8, 2, 2, 204, 206, 5, 26, 14, 2, 205, 207, 5, 22, 12, 2, 206,
	205, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 21, 3, 2, 2, 2, 208, 210, 7,
	9, 2, 2, 209, 211, 5, 24, 13, 2, 210, 209, 3, 2, 2, 2, 211, 212, 3, 2,
	2, 2, 212, 210, 3, 2, 2, 2, 212, 213, 3, 2, 2, 2, 213, 214, 3, 2, 2, 2,
	214, 215, 7, 10, 2, 2, 215, 23, 3, 2, 2, 2, 216, 217, 5, 26, 14, 2, 217,
	218, 7, 7, 2, 2, 218, 219, 5, 30, 16, 2, 219, 25, 3, 2, 2, 2, 220, 221,
	9, 3, 2, 2, 221, 27, 3, 2, 2, 2, 222, 231, 5, 36, 19, 2, 223, 231, 7, 35,
	2, 2, 224, 231, 7, 36, 2, 2, 225, 231, 7, 18, 2, 2, 226, 231, 7, 19, 2,
	2, 227, 231, 5, 4, 3, 2, 228, 231, 5, 6, 4, 2, 229, 231, 5, 10, 6, 2, 230,
	222, 3, 2, 2, 2, 230, 223, 3, 2, 2, 2, 230, 224, 3, 2, 2, 2, 230, 225,
	3, 2, 2, 2, 230, 226, 3, 2, 2, 2, 230, 227, 3, 2, 2, 2, 230, 228, 3, 2,
	2, 2, 230, 229, 3, 2, 2, 2, 231, 29, 3, 2, 2, 2, 232, 242, 5, 32, 17, 2,
	233, 242, 5, 36, 19, 2, 234, 242, 7, 35, 2, 2, 235, 242, 7, 36, 2, 2, 236,
	242, 7, 18, 2, 2, 237, 242, 7, 19, 2, 2, 238, 242, 5, 4, 3, 2, 239, 242,
	5, 8, 5, 2, 240, 242, 5, 12, 7, 2, 241, 232, 3, 2, 2, 2, 241, 233, 3, 2,
	2, 2, 241, 234, 3, 2, 2, 2, 241, 235, 3, 2, 2, 2, 241, 236, 3, 2, 2, 2,
	241, 237, 3, 2, 2, 2, 241, 238, 3, 2, 2, 2, 241, 239, 3, 2, 2, 2, 241,
	240, 3, 2, 2, 2, 242, 31, 3, 2, 2, 2, 243, 244, 7, 11, 2, 2, 244, 245,
	5, 26, 14, 2, 245, 33, 3, 2, 2, 2, 246, 247, 7, 12, 2, 2, 247, 248, 5,
	28, 15, 2, 248, 35, 3, 2, 2, 2, 249, 250, 9, 4, 2, 2, 250, 37, 3, 2, 2,
	2, 251, 255, 5, 40, 21, 2, 252, 255, 5, 42, 22, 2, 253, 255, 5, 44, 23,
	2, 254, 251, 3, 2, 2, 2, 254, 252, 3, 2, 2, 2, 254, 253, 3, 2, 2, 2, 255,
	39, 3, 2, 2, 2, 256, 257, 5, 26, 14, 2, 257, 41, 3, 2, 2, 2, 258, 259,
	7, 3, 2, 2, 259, 260, 5, 38, 20, 2, 260, 261, 7, 4, 2, 2, 261, 43, 3, 2,
	2, 2, 262, 263, 5, 40, 21, 2, 263, 264, 7, 13, 2, 2, 264, 269, 3, 2, 2,
	2, 265, 266, 5, 42, 22, 2, 266, 267, 7, 13, 2, 2, 267, 269, 3, 2, 2, 2,
	268, 262, 3, 2, 2, 2, 268, 265, 3, 2, 2, 2, 269, 45, 3, 2, 2, 2, 270, 284,
	5, 52, 27, 2, 271, 273, 5, 2, 2, 2, 272, 274, 5, 26, 14, 2, 273, 272, 3,
	2, 2, 2, 273, 274, 3, 2, 2, 2, 274, 276, 3, 2, 2, 2, 275, 277, 5, 48, 25,
	2, 276, 275, 3, 2, 2, 2, 276, 277, 3, 2, 2, 2, 277, 279, 3, 2, 2, 2, 278,
	280, 5, 18, 10, 2, 279, 278, 3, 2, 2, 2, 279, 280, 3, 2, 2, 2, 280, 281,
	3, 2, 2, 2, 281, 282, 5, 52, 27, 2, 282, 284, 3, 2, 2, 2, 283, 270, 3,
	2, 2, 2, 283, 271, 3, 2, 2, 2, 284, 47, 3, 2, 2, 2, 285, 287, 7, 9, 2,
	2, 286, 288, 5, 50, 26, 2, 287, 286, 3, 2, 2, 2, 288, 289, 3, 2, 2, 2,
	289, 287, 3, 2, 2, 2, 289, 290, 3, 2, 2, 2, 290, 291, 3, 2, 2, 2, 291,
	292, 7, 10, 2, 2, 292, 49, 3, 2, 2, 2, 293, 294, 5, 32, 17, 2, 294, 295,
	7, 7, 2, 2, 295, 297, 5, 38, 20, 2, 296, 298, 5, 34, 18, 2, 297, 296, 3,
	2, 2, 2, 297, 298, 3, 2, 2, 2, 298, 51, 3, 2, 2, 2, 299, 301, 7, 5, 2,
	2, 300, 302, 5, 54, 28, 2, 301, 300, 3, 2, 2, 2, 302, 303, 3, 2, 2, 2,
	303, 301, 3, 2, 2, 2, 303, 304, 3, 2, 2, 2, 304, 305, 3, 2, 2, 2, 305,
	306, 7, 6, 2, 2, 306, 53, 3, 2, 2, 2, 307, 311, 5, 56, 29, 2, 308, 311,
	5, 60, 31, 2, 309, 311, 5, 62, 32, 2, 310, 307, 3, 2, 2, 2, 310, 308, 3,
	2, 2, 2, 310, 309, 3, 2, 2, 2, 311, 55, 3, 2, 2, 2, 312, 314, 5, 58, 30,
	2, 313, 312, 3, 2, 2, 2, 313, 314, 3, 2, 2, 2, 314, 315, 3, 2, 2, 2, 315,
	317, 5, 26, 14, 2, 316, 318, 5, 22, 12, 2, 317, 316, 3, 2, 2, 2, 317, 318,
	3, 2, 2, 2, 318, 320, 3, 2, 2, 2, 319, 321, 5, 18, 10, 2, 320, 319, 3,
	2, 2, 2, 320, 321, 3, 2, 2, 2, 321, 323, 3, 2, 2, 2, 322, 324, 5, 52, 27,
	2, 323, 322, 3, 2, 2, 2, 323, 324, 3, 2, 2, 2, 324, 57, 3, 2, 2, 2, 325,
	326, 5, 26, 14, 2, 326, 327, 7, 7, 2, 2, 327, 59, 3, 2, 2, 2, 328, 329,
	7, 14, 2, 2, 329, 331, 5, 66, 34, 2, 330, 332, 5, 18, 10, 2, 331, 330,
	3, 2, 2, 2, 331, 332, 3, 2, 2, 2, 332, 61, 3, 2, 2, 2, 333, 335, 7, 14,
	2, 2, 334, 336, 5, 68, 35, 2, 335, 334, 3, 2, 2, 2, 335, 336, 3, 2, 2,
	2, 336, 338, 3, 2, 2, 2, 337, 339, 5, 18, 10, 2, 338, 337, 3, 2, 2, 2,
	338, 339, 3, 2, 2, 2, 339, 340, 3, 2, 2, 2, 340, 341, 5, 52, 27, 2, 341,
	63, 3, 2, 2, 2, 342, 343, 7, 20, 2, 2, 343, 344, 5, 66, 34, 2, 344, 346,
	5, 68, 35, 2, 345, 347, 5, 18, 10, 2, 346, 345, 3, 2, 2, 2, 346, 347, 3,
	2, 2, 2, 347, 348, 3, 2, 2, 2, 348, 349, 5, 52, 27, 2, 349, 65, 3, 2, 2,
	2, 350, 351, 5, 26, 14, 2, 351, 67, 3, 2, 2, 2, 352, 353, 7, 15, 2, 2,
	353, 354, 5, 40, 21, 2, 354, 69, 3, 2, 2, 2, 355, 358, 5, 46, 24, 2, 356,
	358, 5, 64, 33, 2, 357, 355, 3, 2, 2, 2, 357, 356, 3, 2, 2, 2, 358, 359,
	3, 2, 2, 2, 359, 357, 3, 2, 2, 2, 359, 360, 3, 2, 2, 2, 360, 71, 3, 2,
	2, 2, 361, 362, 5, 36, 19, 2, 362, 73, 3, 2, 2, 2, 363, 365, 5, 72, 37,
	2, 364, 363, 3, 2, 2, 2, 364, 365, 3, 2, 2, 2, 365, 366, 3, 2, 2, 2, 366,
	371, 5, 76, 39, 2, 367, 371, 5, 80, 41, 2, 368, 371, 5, 82, 42, 2, 369,
	371, 5, 128, 65, 2, 370, 364, 3, 2, 2, 2, 370, 367, 3, 2, 2, 2, 370, 368,
	3, 2, 2, 2, 370, 369, 3, 2, 2, 2, 371, 75, 3, 2, 2, 2, 372, 374, 5, 72,
	37, 2, 373, 372, 3, 2, 2, 2, 373, 374, 3, 2, 2, 2, 374, 375, 3, 2, 2, 2,
	375, 377, 7, 24, 2, 2, 376, 378, 5, 18, 10, 2, 377, 376, 3, 2, 2, 2, 377,
	378, 3, 2, 2, 2, 378, 379, 3, 2, 2, 2, 379, 381, 7, 5, 2, 2, 380, 382,
	5, 78, 40, 2, 381, 380, 3, 2, 2, 2, 382, 383, 3, 2, 2, 2, 383, 381, 3,
	2, 2, 2, 383, 384, 3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385, 386, 7, 6, 2,
	2, 386, 77, 3, 2, 2, 2, 387, 389, 5, 72, 37, 2, 388, 387, 3, 2, 2, 2, 388,
	389, 3, 2, 2, 2, 389, 390, 3, 2, 2, 2, 390, 391, 5, 2, 2, 2, 391, 392,
	7, 7, 2, 2, 392, 393, 5, 40, 21, 2, 393, 79, 3, 2, 2, 2, 394, 401, 5, 84,
	43, 2, 395, 401, 5, 88, 45, 2, 396, 401, 5, 102, 52, 2, 397, 401, 5, 106,
	54, 2, 398, 401, 5, 114, 58, 2, 399, 401, 5, 122, 62, 2, 400, 394, 3, 2,
	2, 2, 400, 395, 3, 2, 2, 2, 400, 396, 3, 2, 2, 2, 400, 397, 3, 2, 2, 2,
	400, 398, 3, 2, 2, 2, 400, 399, 3, 2, 2, 2, 401, 81, 3, 2, 2, 2, 402, 409,
	5, 90, 46, 2, 403, 409, 5, 104, 53, 2, 404, 409, 5, 108, 55, 2, 405, 409,
	5, 86, 44, 2, 406, 409, 5, 116, 59, 2, 407, 409, 5, 124, 63, 2, 408, 402,
	3, 2, 2, 2, 408, 403, 3, 2, 2, 2, 408, 404, 3, 2, 2, 2, 408, 405, 3, 2,
	2, 2, 408, 406, 3, 2, 2, 2, 408, 407, 3, 2, 2, 2, 409, 83, 3, 2, 2, 2,
	410, 412, 5, 72, 37, 2, 411, 410, 3, 2, 2, 2, 411, 412, 3, 2, 2, 2, 412,
	413, 3, 2, 2, 2, 413, 414, 7, 25, 2, 2, 414, 416, 5, 26, 14, 2, 415, 417,
	5, 18, 10, 2, 416, 415, 3, 2, 2, 2, 416, 417, 3, 2, 2, 2, 417, 85, 3, 2,
	2, 2, 418, 419, 7, 32, 2, 2, 419, 420, 7, 25, 2, 2, 420, 422, 5, 26, 14,
	2, 421, 423, 5, 18, 10, 2, 422, 421, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2,
	423, 87, 3, 2, 2, 2, 424, 426, 5, 72, 37, 2, 425, 424, 3, 2, 2, 2, 425,
	426, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 428, 7, 26, 2, 2, 428, 430,
	5, 26, 14, 2, 429, 431, 5, 92, 47, 2, 430, 429, 3, 2, 2, 2, 430, 431, 3,
	2, 2, 2, 431, 433, 3, 2, 2, 2, 432, 434, 5, 18, 10, 2, 433, 432, 3, 2,
	2, 2, 433, 434, 3, 2, 2, 2, 434, 436, 3, 2, 2, 2, 435, 437, 5, 94, 48,
	2, 436, 435, 3, 2, 2, 2, 436, 437, 3, 2, 2, 2, 437, 89, 3, 2, 2, 2, 438,
	439, 7, 32, 2, 2, 439, 440, 7, 26, 2, 2, 440, 442, 5, 26, 14, 2, 441, 443,
	5, 92, 47, 2, 442, 441, 3, 2, 2, 2, 442, 443, 3, 2, 2, 2, 443, 445, 3,
	2, 2, 2, 444, 446, 5, 18, 10, 2, 445, 444, 3, 2, 2, 2, 445, 446, 3, 2,
	2, 2, 446, 448, 3, 2, 2, 2, 447, 449, 5, 94, 48, 2, 448, 447, 3, 2, 2,
	2, 448, 449, 3, 2, 2, 2, 449, 91, 3, 2, 2, 2, 450, 451, 8, 47, 1, 2, 451,
	453, 7, 28, 2, 2, 452, 454, 7, 16, 2, 2, 453, 452, 3, 2, 2, 2, 453, 454,
	3, 2, 2, 2, 454, 456, 3, 2, 2, 2, 455, 457, 5, 40, 21, 2, 456, 455, 3,
	2, 2, 2, 457, 458, 3, 2, 2, 2, 458, 456, 3, 2, 2, 2, 458, 459, 3, 2, 2,
	2, 459, 465, 3, 2, 2, 2, 460, 461, 12, 3, 2, 2, 461, 462, 7, 16, 2, 2,
	462, 464, 5, 40, 21, 2, 463, 460, 3, 2, 2, 2, 464, 467, 3, 2, 2, 2, 465,
	463, 3, 2, 2, 2, 465, 466, 3, 2, 2, 2, 466, 93, 3, 2, 2, 2, 467, 465, 3,
	2, 2, 2, 468, 472, 7, 5, 2, 2, 469, 471, 5, 96, 49, 2, 470, 469, 3, 2,
	2, 2, 471, 474, 3, 2, 2, 2, 472, 470, 3, 2, 2, 2, 472, 473, 3, 2, 2, 2,
	473, 475, 3, 2, 2, 2, 474, 472, 3, 2, 2, 2, 475, 476, 7, 6, 2, 2, 476,
	95, 3, 2, 2, 2, 477, 479, 5, 72, 37, 2, 478, 477, 3, 2, 2, 2, 478, 479,
	3, 2, 2, 2, 479, 480, 3, 2, 2, 2, 480, 482, 5, 26, 14, 2, 481, 483, 5,
	98, 50, 2, 482, 481, 3, 2, 2, 2, 482, 483, 3, 2, 2, 2, 483, 484, 3, 2,
	2, 2, 484, 485, 7, 7, 2, 2, 485, 487, 5, 38, 20, 2, 486, 488, 5, 18, 10,
	2, 487, 486, 3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488, 97, 3, 2, 2, 2, 489,
	491, 7, 9, 2, 2, 490, 492, 5, 100, 51, 2, 491, 490, 3, 2, 2, 2, 492, 493,
	3, 2, 2, 2, 493, 491, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494, 495, 3, 2,
	2, 2, 495, 496, 7, 10, 2, 2, 496, 99, 3, 2, 2, 2, 497, 499, 5, 72, 37,
	2, 498, 497, 3, 2, 2, 2, 498, 499, 3, 2, 2, 2, 499, 500, 3, 2, 2, 2, 500,
	501, 5, 26, 14, 2, 501, 502, 7, 7, 2, 2, 502, 504, 5, 38, 20, 2, 503, 505,
	5, 34, 18, 2, 504, 503, 3, 2, 2, 2, 504, 505, 3, 2, 2, 2, 505, 507, 3,
	2, 2, 2, 506, 508, 5, 18, 10, 2, 507, 506, 3, 2, 2, 2, 507, 508, 3, 2,
	2, 2, 508, 101, 3, 2, 2, 2, 509, 511, 5, 72, 37, 2, 510, 509, 3, 2, 2,
	2, 510, 511, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 512, 513, 7, 27, 2, 2, 513,
	515, 5, 26, 14, 2, 514, 516, 5, 18, 10, 2, 515, 514, 3, 2, 2, 2, 515, 516,
	3, 2, 2, 2, 516, 518, 3, 2, 2, 2, 517, 519, 5, 94, 48, 2, 518, 517, 3,
	2, 2, 2, 518, 519, 3, 2, 2, 2, 519, 103, 3, 2, 2, 2, 520, 521, 7, 32, 2,
	2, 521, 522, 7, 27, 2, 2, 522, 524, 5, 26, 14, 2, 523, 525, 5, 18, 10,
	2, 524, 523, 3, 2, 2, 2, 524, 525, 3, 2, 2, 2, 525, 527, 3, 2, 2, 2, 526,
	528, 5, 94, 48, 2, 527, 526, 3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528, 105,
	3, 2, 2, 2, 529, 531, 5, 72, 37, 2, 530, 529, 3, 2, 2, 2, 530, 531, 3,
	2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 533, 7, 30, 2, 2, 533, 535, 5, 26,
	14, 2, 534, 536, 5, 18, 10, 2, 535, 534, 3, 2, 2, 2, 535, 536, 3, 2, 2,
	2, 536, 537, 3, 2, 2, 2, 537, 538, 5, 110, 56, 2, 538, 107, 3, 2, 2, 2,
	539, 540, 7, 32, 2, 2, 540, 541, 7, 30, 2, 2, 541, 543, 5, 26, 14, 2, 542,
	544, 5, 18, 10, 2, 543, 542, 3, 2, 2, 2, 543, 544, 3, 2, 2, 2, 544, 546,
	3, 2, 2, 2, 545, 547, 5, 110, 56, 2, 546, 545, 3, 2, 2, 2, 546, 547, 3,
	2, 2, 2, 547, 109, 3, 2, 2, 2, 548, 549, 7, 12, 2, 2, 549, 550, 5, 112,
	57, 2, 550, 111, 3, 2, 2, 2, 551, 553, 8, 57, 1, 2, 552, 554, 7, 17, 2,
	2, 553, 552, 3, 2, 2, 2, 553, 554, 3, 2, 2, 2, 554, 555, 3, 2, 2, 2, 555,
	556, 5, 40, 21, 2, 556, 562, 3, 2, 2, 2, 557, 558, 12, 3, 2, 2, 558, 559,
	7, 17, 2, 2, 559, 561, 5, 40, 21, 2, 560, 557, 3, 2, 2, 2, 561, 564, 3,
	2, 2, 2, 562, 560, 3, 2, 2, 2, 562, 563, 3, 2, 2, 2, 563, 113, 3, 2, 2,
	2, 564, 562, 3, 2, 2, 2, 565, 567, 5, 72, 37, 2, 566, 565, 3, 2, 2, 2,
	566, 567, 3, 2, 2, 2, 567, 568, 3, 2, 2, 2, 568, 569, 7, 29, 2, 2, 569,
	571, 5, 26, 14, 2, 570, 572, 5, 18, 10, 2, 571, 570, 3, 2, 2, 2, 571, 572,
	3, 2, 2, 2, 572, 573, 3, 2, 2, 2, 573, 574, 5, 118, 60, 2, 574, 115, 3,
	2, 2, 2, 575, 576, 7, 32, 2, 2, 576, 577, 7, 29, 2, 2, 577, 579, 5, 26,
	14, 2, 578, 580, 5, 18, 10, 2, 579, 578, 3, 2, 2, 2, 579, 580, 3, 2, 2,
	2, 580, 582, 3, 2, 2, 2, 581, 583, 5, 118, 60, 2, 582, 581, 3, 2, 2, 2,
	582, 583, 3, 2, 2, 2, 583, 117, 3, 2, 2, 2, 584, 586, 7, 5, 2, 2, 585,
	587, 5, 120, 61, 2, 586, 585, 3, 2, 2, 2, 587, 588, 3, 2, 2, 2, 588, 586,
	3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 590, 3, 2, 2, 2, 590, 591, 7, 6,
	2, 2, 591, 119, 3, 2, 2, 2, 592, 594, 5, 72, 37, 2, 593, 592, 3, 2, 2,
	2, 593, 594, 3, 2, 2, 2, 594, 595, 3, 2, 2, 2, 595, 597, 5, 4, 3, 2, 596,
	598, 5, 18, 10, 2, 597, 596, 3, 2, 2, 2, 597, 598, 3, 2, 2, 2, 598, 121,
	3, 2, 2, 2, 599, 601, 5, 72, 37, 2, 600, 599, 3, 2, 2, 2, 600, 601, 3,
	2, 2, 2, 601, 602, 3, 2, 2, 2, 602, 603, 7, 31, 2, 2, 603, 605, 5, 26,
	14, 2, 604, 606, 5, 18, 10, 2, 605, 604, 3, 2, 2, 2, 605, 606, 3, 2, 2,
	2, 606, 607, 3, 2, 2, 2, 607, 608, 5, 126, 64, 2, 608, 123, 3, 2, 2, 2,
	609, 610, 7, 32, 2, 2, 610, 611, 7, 31, 2, 2, 611, 613, 5, 26, 14, 2, 612,
	614, 5, 18, 10, 2, 613, 612, 3, 2, 2, 2, 613, 614, 3, 2, 2, 2, 614, 616,
	3, 2, 2, 2, 615, 617, 5, 126, 64, 2, 616, 615, 3, 2, 2, 2, 616, 617, 3,
	2, 2, 2, 617, 125, 3, 2, 2, 2, 618, 620, 7, 5, 2, 2, 619, 621, 5, 100,
	51, 2, 620, 619, 3, 2, 2, 2, 621, 622, 3, 2, 2, 2, 622, 620, 3, 2, 2, 2,
	622, 623, 3, 2, 2, 2, 623, 624, 3, 2, 2, 2, 624, 625, 7, 6, 2, 2, 625,
	127, 3, 2, 2, 2, 626, 628, 5, 72, 37, 2, 627, 626, 3, 2, 2, 2, 627, 628,
	3, 2, 2, 2, 628, 629, 3, 2, 2, 2, 629, 630, 7, 33, 2, 2, 630, 631, 7, 8,
	2, 2, 631, 633, 5, 26, 14, 2, 632, 634, 5, 98, 50, 2, 633, 632, 3, 2, 2,
	2, 633, 634, 3, 2, 2, 2, 634, 635, 3, 2, 2, 2, 635, 636, 7, 15, 2, 2, 636,
	637, 5, 132, 67, 2, 637, 129, 3, 2, 2, 2, 638, 639, 5, 26, 14, 2, 639,
	131, 3, 2, 2, 2, 640, 641, 8, 67, 1, 2, 641, 642, 5, 130, 66, 2, 642, 648,
	3, 2, 2, 2, 643, 644, 12, 3, 2, 2, 644, 645, 7, 17, 2, 2, 645, 647, 5,
	130, 66, 2, 646, 643, 3, 2, 2, 2, 647, 650, 3, 2, 2, 2, 648, 646, 3, 2,
	2, 2, 648, 649, 3, 2, 2, 2, 649, 133, 3, 2, 2, 2, 650, 648, 3, 2, 2, 2,
	651, 653, 5, 26, 14, 2, 652, 654, 5, 98, 50, 2, 653, 652, 3, 2, 2, 2, 653,
	654, 3, 2, 2, 2, 654, 655, 3, 2, 2, 2, 655, 656, 7, 7, 2, 2, 656, 658,
	5, 38, 20, 2, 657, 659, 5, 18, 10, 2, 658, 657, 3, 2, 2, 2, 658, 659, 3,
	2, 2, 2, 659, 681, 3, 2, 2, 2, 660, 661, 5, 98, 50, 2, 661, 662, 7, 7,
	2, 2, 662, 664, 5, 38, 20, 2, 663, 665, 5, 18, 10, 2, 664, 663, 3, 2, 2,
	2, 664, 665, 3, 2, 2, 2, 665, 681, 3, 2, 2, 2, 666, 668, 5, 26, 14, 2,
	667, 669, 5, 98, 50, 2, 668, 667, 3, 2, 2, 2, 668, 669, 3, 2, 2, 2, 669,
	671, 3, 2, 2, 2, 670, 672, 5, 18, 10, 2, 671, 670, 3, 2, 2, 2, 671, 672,
	3, 2, 2, 2, 672, 681, 3, 2, 2, 2, 673, 674, 7, 7, 2, 2, 674, 676, 5, 38,
	20, 2, 675, 677, 5, 18, 10, 2, 676, 675, 3, 2, 2, 2, 676, 677, 3, 2, 2,
	2, 677, 681, 3, 2, 2, 2, 678, 681, 5, 98, 50, 2, 679, 681, 5, 18, 10, 2,
	680, 651, 3, 2, 2, 2, 680, 660, 3, 2, 2, 2, 680, 666, 3, 2, 2, 2, 680,
	673, 3, 2, 2, 2, 680, 678, 3, 2, 2, 2, 680, 679, 3, 2, 2, 2, 681, 135,
	3, 2, 2, 2, 682, 684, 5, 72, 37, 2, 683, 682, 3, 2, 2, 2, 683, 684, 3,
	2, 2, 2, 684, 685, 3, 2, 2, 2, 685, 686, 7, 26, 2, 2, 686, 688, 5, 26,
	14, 2, 687, 689, 5, 92, 47, 2, 688, 687, 3, 2, 2, 2, 688, 689, 3, 2, 2,
	2, 689, 691, 3, 2, 2, 2, 690, 692, 5, 18, 10, 2, 691, 690, 3, 2, 2, 2,
	691, 692, 3, 2, 2, 2, 692, 694, 3, 2, 2, 2, 693, 695, 5, 94, 48, 2, 694,
	693, 3, 2, 2, 2, 694, 695, 3, 2, 2, 2, 695, 722, 3, 2, 2, 2, 696, 698,
	5, 72, 37, 2, 697, 696, 3, 2, 2, 2, 697, 698, 3, 2, 2, 2, 698, 699, 3,
	2, 2, 2, 699, 701, 5, 26, 14, 2, 700, 702, 5, 92, 47, 2, 701, 700, 3, 2,
	2, 2, 701, 702, 3, 2, 2, 2, 702, 704, 3, 2, 2, 2, 703, 705, 5, 18, 10,
	2, 704, 703, 3, 2, 2, 2, 704, 705, 3, 2, 2, 2, 705, 707, 3, 2, 2, 2, 706,
	708, 5, 94, 48, 2, 707, 706, 3, 2, 2, 2, 707, 708, 3, 2, 2, 2, 708, 722,
	3, 2, 2, 2, 709, 711, 5, 72, 37, 2, 710, 709, 3, 2, 2, 2, 710, 711, 3,
	2, 2, 2, 711, 713, 3, 2, 2, 2, 712, 714, 5, 92, 47, 2, 713, 712, 3, 2,
	2, 2, 713, 714, 3, 2, 2, 2, 714, 716, 3, 2, 2, 2, 715, 717, 5, 18, 10,
	2, 716, 715, 3, 2, 2, 2, 716, 717, 3, 2, 2, 2, 717, 719, 3, 2, 2, 2, 718,
	720, 5, 94, 48, 2, 719, 718, 3, 2, 2, 2, 719, 720, 3, 2, 2, 2, 720, 722,
	3, 2, 2, 2, 721, 683, 3, 2, 2, 2, 721, 697, 3, 2, 2, 2, 721, 710, 3, 2,
	2, 2, 722, 137, 3, 2, 2, 2, 723, 725, 5, 72, 37, 2, 724, 723, 3, 2, 2,
	2, 724, 725, 3, 2, 2, 2, 725, 726, 3, 2, 2, 2, 726, 727, 7, 31, 2, 2, 727,
	729, 5, 26, 14, 2, 728, 730, 5, 18, 10, 2, 729, 728, 3, 2, 2, 2, 729, 730,
	3, 2, 2, 2, 730, 731, 3, 2, 2, 2, 731, 732, 5, 126, 64, 2, 732, 756, 3,
	2, 2, 2, 733, 735, 5, 72, 37, 2, 734, 733, 3, 2, 2, 2, 734, 735, 3, 2,
	2, 2, 735, 736, 3, 2, 2, 2, 736, 738, 5, 26, 14, 2, 737, 739, 5, 18, 10,
	2, 738, 737, 3, 2, 2, 2, 738, 739, 3, 2, 2, 2, 739, 740, 3, 2, 2, 2, 740,
	741, 5, 126, 64, 2, 741, 756, 3, 2, 2, 2, 742, 744, 5, 72, 37, 2, 743,
	742, 3, 2, 2, 2, 743, 744, 3, 2, 2, 2, 744, 746, 3, 2, 2, 2, 745, 747,
	5, 18, 10, 2, 746, 745, 3, 2, 2, 2, 746, 747, 3, 2, 2, 2, 747, 748, 3,
	2, 2, 2, 748, 756, 5, 126, 64, 2, 749, 751, 5, 72, 37, 2, 750, 749, 3,
	2, 2, 2, 750, 751, 3, 2, 2, 2, 751, 753, 3, 2, 2, 2, 752, 754, 5, 18, 10,
	2, 753, 752, 3, 2, 2, 2, 753, 754, 3, 2, 2, 2, 754, 756, 3, 2, 2, 2, 755,
	724, 3, 2, 2, 2, 755, 734, 3, 2, 2, 2, 755, 743, 3, 2, 2, 2, 755, 750,
	3, 2, 2, 2, 756, 139, 3, 2, 2, 2, 757, 759, 5, 72, 37, 2, 758, 757, 3,
	2, 2, 2, 758, 759, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 761, 5, 26, 14,
	2, 761, 762, 7, 7, 2, 2, 762, 764, 5, 38, 20, 2, 763, 765, 5, 34, 18, 2,
	764, 763, 3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 767, 3, 2, 2, 2, 766,
	768, 5, 18, 10, 2, 767, 766, 3, 2, 2, 2, 767, 768, 3, 2, 2, 2, 768, 791,
	3, 2, 2, 2, 769, 771, 5, 72, 37, 2, 770, 769, 3, 2, 2, 2, 770, 771, 3,
	2, 2, 2, 771, 772, 3, 2, 2, 2, 772, 774, 5, 26, 14, 2, 773, 775, 5, 34,
	18, 2, 774, 773, 3, 2, 2, 2, 774, 775, 3, 2, 2, 2, 775, 777, 3, 2, 2, 2,
	776, 778, 5, 18, 10, 2, 777, 776, 3, 2, 2, 2, 777, 778, 3, 2, 2, 2, 778,
	791, 3, 2, 2, 2, 779, 781, 5, 72, 37, 2, 780, 779, 3, 2, 2, 2, 780, 781,
	3, 2, 2, 2, 781, 782, 3, 2, 2, 2, 782, 783, 7, 7, 2, 2, 783, 785, 5, 38,
	20, 2, 784, 786, 5, 34, 18, 2, 785, 784, 3, 2, 2, 2, 785, 786, 3, 2, 2,
	2, 786, 788, 3, 2, 2, 2, 787, 789, 5, 18, 10, 2, 788, 787, 3, 2, 2, 2,
	788, 789, 3, 2, 2, 2, 789, 791, 3, 2, 2, 2, 790, 758, 3, 2, 2, 2, 790,
	770, 3, 2, 2, 2, 790, 780, 3, 2, 2, 2, 791, 141, 3, 2, 2, 2, 792, 794,
	5, 72, 37, 2, 793, 792, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794, 795, 3,
	2, 2, 2, 795, 796, 7, 29, 2, 2, 796, 798, 5, 26, 14, 2, 797, 799, 5, 18,
	10, 2, 798, 797, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799, 800, 3, 2, 2, 2,
	800, 801, 5, 118, 60, 2, 801, 819, 3, 2, 2, 2, 802, 804, 5, 72, 37, 2,
	803, 802, 3, 2, 2, 2, 803, 804, 3, 2, 2, 2, 804, 805, 3, 2, 2, 2, 805,
	807, 5, 26, 14, 2, 806, 808, 5, 18, 10, 2, 807, 806, 3, 2, 2, 2, 807, 808,
	3, 2, 2, 2, 808, 809, 3, 2, 2, 2, 809, 810, 5, 118, 60, 2, 810, 819, 3,
	2, 2, 2, 811, 813, 5, 72, 37, 2, 812, 811, 3, 2, 2, 2, 812, 813, 3, 2,
	2, 2, 813, 815, 3, 2, 2, 2, 814, 816, 5, 18, 10, 2, 815, 814, 3, 2, 2,
	2, 815, 816, 3, 2, 2, 2, 816, 817, 3, 2, 2, 2, 817, 819, 5, 118, 60, 2,
	818, 793, 3, 2, 2, 2, 818, 803, 3, 2, 2, 2, 818, 812, 3, 2, 2, 2, 819,
	143, 3, 2, 2, 2, 820, 822, 5, 72, 37, 2, 821, 820, 3, 2, 2, 2, 821, 822,
	3, 2, 2, 2, 822, 823, 3, 2, 2, 2, 823, 824, 7, 27, 2, 2, 824, 826, 5, 26,
	14, 2, 825, 827, 5, 18, 10, 2, 826, 825, 3, 2, 2, 2, 826, 827, 3, 2, 2,
	2, 827, 828, 3, 2, 2, 2, 828, 829, 5, 94, 48, 2, 829, 847, 3, 2, 2, 2,
	830, 832, 5, 72, 37, 2, 831, 830, 3, 2, 2, 2, 831, 832, 3, 2, 2, 2, 832,
	833, 3, 2, 2, 2, 833, 835, 5, 26, 14, 2, 834, 836, 5, 18, 10, 2, 835, 834,
	3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836, 837, 3, 2, 2, 2, 837, 838, 5, 94,
	48, 2, 838, 847, 3, 2, 2, 2, 839, 841, 5, 72, 37, 2, 840, 839, 3, 2, 2,
	2, 840, 841, 3, 2, 2, 2, 841, 843, 3, 2, 2, 2, 842, 844, 5, 18, 10, 2,
	843, 842, 3, 2, 2, 2, 843, 844, 3, 2, 2, 2, 844, 845, 3, 2, 2, 2, 845,
	847, 5, 94, 48, 2, 846, 821, 3, 2, 2, 2, 846, 831, 3, 2, 2, 2, 846, 840,
	3, 2, 2, 2, 847, 145, 3, 2, 2, 2, 848, 850, 5, 72, 37, 2, 849, 848, 3,
	2, 2, 2, 849, 850, 3, 2, 2, 2, 850, 851, 3, 2, 2, 2, 851, 852, 7, 30, 2,
	2, 852, 854, 5, 26, 14, 2, 853, 855, 5, 18, 10, 2, 854, 853, 3, 2, 2, 2,
	854, 855, 3, 2, 2, 2, 855, 857, 3, 2, 2, 2, 856, 858, 5, 110, 56, 2, 857,
	856, 3, 2, 2, 2, 857, 858, 3, 2, 2, 2, 858, 879, 3, 2, 2, 2, 859, 861,
	5, 72, 37, 2, 860, 859, 3, 2, 2, 2, 860, 861, 3, 2, 2, 2, 861, 862, 3,
	2, 2, 2, 862, 864, 5, 26, 14, 2, 863, 865, 5, 18, 10, 2, 864, 863, 3, 2,
	2, 2, 864, 865, 3, 2, 2, 2, 865, 867, 3, 2, 2, 2, 866, 868, 5, 110, 56,
	2, 867, 866, 3, 2, 2, 2, 867, 868, 3, 2, 2, 2, 868, 879, 3, 2, 2, 2, 869,
	871, 5, 72, 37, 2, 870, 869, 3, 2, 2, 2, 870, 871, 3, 2, 2, 2, 871, 873,
	3, 2, 2, 2, 872, 874, 5, 18, 10, 2, 873, 872, 3, 2, 2, 2, 873, 874, 3,
	2, 2, 2, 874, 876, 3, 2, 2, 2, 875, 877, 5, 110, 56, 2, 876, 875, 3, 2,
	2, 2, 876, 877, 3, 2, 2, 2, 877, 879, 3, 2, 2, 2, 878, 849, 3, 2, 2, 2,
	878, 860, 3, 2, 2, 2, 878, 870, 3, 2, 2, 2, 879, 147, 3, 2, 2, 2, 880,
	882, 5, 72, 37, 2, 881, 880, 3, 2, 2, 2, 881, 882, 3, 2, 2, 2, 882, 884,
	3, 2, 2, 2, 883, 885, 5, 26, 14, 2, 884, 883, 3, 2, 2, 2, 884, 885, 3,
	2, 2, 2, 885, 887, 3, 2, 2, 2, 886, 888, 5, 18, 10, 2, 887, 886, 3, 2,
	2, 2, 887, 888, 3, 2, 2, 2, 888, 149, 3, 2, 2, 2, 152, 158, 167, 176, 185,
	201, 206, 212, 230, 241, 254, 268, 273, 276, 279, 283, 289, 297, 303, 310,
	313, 317, 320, 323, 331, 335, 338, 346, 357, 359, 364, 370, 373, 377, 383,
	388, 400, 408, 411, 416, 422, 425, 430, 433, 436, 442, 445, 448, 453, 458,
	465, 472, 478, 482, 487, 493, 498, 504, 507, 510, 515, 518, 524, 527, 530,
	535, 543, 546, 553, 562, 566, 571, 579, 582, 588, 593, 597, 600, 605, 613,
	616, 622, 627, 633, 648, 653, 658, 664, 668, 671, 676, 680, 683, 688, 691,
	694, 697, 701, 704, 707, 710, 713, 716, 719, 721, 724, 729, 734, 738, 743,
	746, 750, 753, 755, 758, 764, 767, 770, 774, 777, 780, 785, 788, 790, 793,
	798, 803, 807, 812, 815, 818, 821, 826, 831, 835, 840, 843, 846, 849, 854,
	857, 860, 864, 867, 870, 873, 876, 878, 881, 884, 887,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'['", "']'", "'{'", "'}'", "':'", "'@'", "'('", "')'", "'$'", "'='",
	"'!'", "'...'", "'on'", "'&'", "'|'", "", "'null'", "'fragment'", "'query'",
	"'mutation'", "'subscription'", "'schema'", "'scalar'", "'type'", "'interface'",
	"'implements'", "'enum'", "'union'", "'input'", "'extend'", "'directive'",
	"", "", "", "'-'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "BooleanValue",
	"NullValue", "FRAGMENT", "QUERY", "MUTATION", "SUBSCRIPTION", "SCHEMA",
	"SCALAR", "TYPE", "INTERFACE", "IMPLEMENTS", "ENUM", "UNION", "INPUT",
	"EXTEND", "DIRECTIVE", "NAME", "IntValue", "FloatValue", "Sign", "IntegerPart",
	"NonZeroDigit", "ExponentPart", "Digit", "StringValue", "TripleQuotedStringValue",
	"Comment", "Ignored",
}

var ruleNames = []string{
	"operationType", "enumValue", "arrayValue", "arrayValueWithVariable", "objectValue",
	"objectValueWithVariable", "objectField", "objectFieldWithVariable", "directives",
	"directive", "arguments", "argument", "name", "value", "valueWithVariable",
	"variable", "defaultValue", "stringValue", "gqlType", "typeName", "listType",
	"nonNullType", "operationDefinition", "variableDefinitions", "variableDefinition",
	"selectionSet", "selection", "field", "alias", "fragmentSpread", "inlineFragment",
	"fragmentDefinition", "fragmentName", "typeCondition", "document", "description",
	"typeSystemDefinition", "schemaDefinition", "operationTypeDefinition",
	"typeDefinition", "typeExtension", "scalarTypeDefinition", "scalarTypeExtensionDefinition",
	"objectTypeDefinition", "objectTypeExtensionDefinition", "implementsInterfaces",
	"fieldsDefinition", "fieldDefinition", "argumentsDefinition", "inputValueDefinition",
	"interfaceTypeDefinition", "interfaceTypeExtensionDefinition", "unionTypeDefinition",
	"unionTypeExtensionDefinition", "unionMembership", "unionMembers", "enumTypeDefinition",
	"enumTypeExtensionDefinition", "enumValueDefinitions", "enumValueDefinition",
	"inputObjectTypeDefinition", "inputObjectTypeExtensionDefinition", "inputObjectValueDefinitions",
	"directiveDefinition", "directiveLocation", "directiveLocations", "partialFieldDefinition",
	"partialObjectTypeDefinition", "partialInputObjectTypeDefinition", "partialInputValueDefinition",
	"partialEnumTypeDefinition", "partialInterfaceTypeDefinition", "partialUnionTypeDefinition",
	"partialScalarTypeDefinition",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type GraphqlParser struct {
	*antlr.BaseParser
}

func NewGraphqlParser(input antlr.TokenStream) *GraphqlParser {
	this := new(GraphqlParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Graphql.g4"

	return this
}

// GraphqlParser tokens.
const (
	GraphqlParserEOF                     = antlr.TokenEOF
	GraphqlParserT__0                    = 1
	GraphqlParserT__1                    = 2
	GraphqlParserT__2                    = 3
	GraphqlParserT__3                    = 4
	GraphqlParserT__4                    = 5
	GraphqlParserT__5                    = 6
	GraphqlParserT__6                    = 7
	GraphqlParserT__7                    = 8
	GraphqlParserT__8                    = 9
	GraphqlParserT__9                    = 10
	GraphqlParserT__10                   = 11
	GraphqlParserT__11                   = 12
	GraphqlParserT__12                   = 13
	GraphqlParserT__13                   = 14
	GraphqlParserT__14                   = 15
	GraphqlParserBooleanValue            = 16
	GraphqlParserNullValue               = 17
	GraphqlParserFRAGMENT                = 18
	GraphqlParserQUERY                   = 19
	GraphqlParserMUTATION                = 20
	GraphqlParserSUBSCRIPTION            = 21
	GraphqlParserSCHEMA                  = 22
	GraphqlParserSCALAR                  = 23
	GraphqlParserTYPE                    = 24
	GraphqlParserINTERFACE               = 25
	GraphqlParserIMPLEMENTS              = 26
	GraphqlParserENUM                    = 27
	GraphqlParserUNION                   = 28
	GraphqlParserINPUT                   = 29
	GraphqlParserEXTEND                  = 30
	GraphqlParserDIRECTIVE               = 31
	GraphqlParserNAME                    = 32
	GraphqlParserIntValue                = 33
	GraphqlParserFloatValue              = 34
	GraphqlParserSign                    = 35
	GraphqlParserIntegerPart             = 36
	GraphqlParserNonZeroDigit            = 37
	GraphqlParserExponentPart            = 38
	GraphqlParserDigit                   = 39
	GraphqlParserStringValue             = 40
	GraphqlParserTripleQuotedStringValue = 41
	GraphqlParserComment                 = 42
	GraphqlParserIgnored                 = 43
)

// GraphqlParser rules.
const (
	GraphqlParserRULE_operationType                      = 0
	GraphqlParserRULE_enumValue                          = 1
	GraphqlParserRULE_arrayValue                         = 2
	GraphqlParserRULE_arrayValueWithVariable             = 3
	GraphqlParserRULE_objectValue                        = 4
	GraphqlParserRULE_objectValueWithVariable            = 5
	GraphqlParserRULE_objectField                        = 6
	GraphqlParserRULE_objectFieldWithVariable            = 7
	GraphqlParserRULE_directives                         = 8
	GraphqlParserRULE_directive                          = 9
	GraphqlParserRULE_arguments                          = 10
	GraphqlParserRULE_argument                           = 11
	GraphqlParserRULE_name                               = 12
	GraphqlParserRULE_value                              = 13
	GraphqlParserRULE_valueWithVariable                  = 14
	GraphqlParserRULE_variable                           = 15
	GraphqlParserRULE_defaultValue                       = 16
	GraphqlParserRULE_stringValue                        = 17
	GraphqlParserRULE_gqlType                            = 18
	GraphqlParserRULE_typeName                           = 19
	GraphqlParserRULE_listType                           = 20
	GraphqlParserRULE_nonNullType                        = 21
	GraphqlParserRULE_operationDefinition                = 22
	GraphqlParserRULE_variableDefinitions                = 23
	GraphqlParserRULE_variableDefinition                 = 24
	GraphqlParserRULE_selectionSet                       = 25
	GraphqlParserRULE_selection                          = 26
	GraphqlParserRULE_field                              = 27
	GraphqlParserRULE_alias                              = 28
	GraphqlParserRULE_fragmentSpread                     = 29
	GraphqlParserRULE_inlineFragment                     = 30
	GraphqlParserRULE_fragmentDefinition                 = 31
	GraphqlParserRULE_fragmentName                       = 32
	GraphqlParserRULE_typeCondition                      = 33
	GraphqlParserRULE_document                           = 34
	GraphqlParserRULE_description                        = 35
	GraphqlParserRULE_typeSystemDefinition               = 36
	GraphqlParserRULE_schemaDefinition                   = 37
	GraphqlParserRULE_operationTypeDefinition            = 38
	GraphqlParserRULE_typeDefinition                     = 39
	GraphqlParserRULE_typeExtension                      = 40
	GraphqlParserRULE_scalarTypeDefinition               = 41
	GraphqlParserRULE_scalarTypeExtensionDefinition      = 42
	GraphqlParserRULE_objectTypeDefinition               = 43
	GraphqlParserRULE_objectTypeExtensionDefinition      = 44
	GraphqlParserRULE_implementsInterfaces               = 45
	GraphqlParserRULE_fieldsDefinition                   = 46
	GraphqlParserRULE_fieldDefinition                    = 47
	GraphqlParserRULE_argumentsDefinition                = 48
	GraphqlParserRULE_inputValueDefinition               = 49
	GraphqlParserRULE_interfaceTypeDefinition            = 50
	GraphqlParserRULE_interfaceTypeExtensionDefinition   = 51
	GraphqlParserRULE_unionTypeDefinition                = 52
	GraphqlParserRULE_unionTypeExtensionDefinition       = 53
	GraphqlParserRULE_unionMembership                    = 54
	GraphqlParserRULE_unionMembers                       = 55
	GraphqlParserRULE_enumTypeDefinition                 = 56
	GraphqlParserRULE_enumTypeExtensionDefinition        = 57
	GraphqlParserRULE_enumValueDefinitions               = 58
	GraphqlParserRULE_enumValueDefinition                = 59
	GraphqlParserRULE_inputObjectTypeDefinition          = 60
	GraphqlParserRULE_inputObjectTypeExtensionDefinition = 61
	GraphqlParserRULE_inputObjectValueDefinitions        = 62
	GraphqlParserRULE_directiveDefinition                = 63
	GraphqlParserRULE_directiveLocation                  = 64
	GraphqlParserRULE_directiveLocations                 = 65
	GraphqlParserRULE_partialFieldDefinition             = 66
	GraphqlParserRULE_partialObjectTypeDefinition        = 67
	GraphqlParserRULE_partialInputObjectTypeDefinition   = 68
	GraphqlParserRULE_partialInputValueDefinition        = 69
	GraphqlParserRULE_partialEnumTypeDefinition          = 70
	GraphqlParserRULE_partialInterfaceTypeDefinition     = 71
	GraphqlParserRULE_partialUnionTypeDefinition         = 72
	GraphqlParserRULE_partialScalarTypeDefinition        = 73
)

// IOperationTypeContext is an interface to support dynamic dispatch.
type IOperationTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperationTypeContext differentiates from other interfaces.
	IsOperationTypeContext()
}

type OperationTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperationTypeContext() *OperationTypeContext {
	var p = new(OperationTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_operationType
	return p
}

func (*OperationTypeContext) IsOperationTypeContext() {}

func NewOperationTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperationTypeContext {
	var p = new(OperationTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_operationType

	return p
}

func (s *OperationTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *OperationTypeContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSUBSCRIPTION, 0)
}

func (s *OperationTypeContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserMUTATION, 0)
}

func (s *OperationTypeContext) QUERY() antlr.TerminalNode {
	return s.GetToken(GraphqlParserQUERY, 0)
}

func (s *OperationTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperationTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperationTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterOperationType(s)
	}
}

func (s *OperationTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitOperationType(s)
	}
}

func (s *OperationTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitOperationType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) OperationType() (localctx IOperationTypeContext) {
	localctx = NewOperationTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, GraphqlParserRULE_operationType)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(148)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<GraphqlParserQUERY)|(1<<GraphqlParserMUTATION)|(1<<GraphqlParserSUBSCRIPTION))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_enumValue
	return p
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterEnumValue(s)
	}
}

func (s *EnumValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitEnumValue(s)
	}
}

func (s *EnumValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitEnumValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) EnumValue() (localctx IEnumValueContext) {
	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, GraphqlParserRULE_enumValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(150)
		p.Name()
	}

	return localctx
}

// IArrayValueContext is an interface to support dynamic dispatch.
type IArrayValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayValueContext differentiates from other interfaces.
	IsArrayValueContext()
}

type ArrayValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayValueContext() *ArrayValueContext {
	var p = new(ArrayValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_arrayValue
	return p
}

func (*ArrayValueContext) IsArrayValueContext() {}

func NewArrayValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayValueContext {
	var p = new(ArrayValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_arrayValue

	return p
}

func (s *ArrayValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayValueContext) AllValue() []IValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueContext)(nil)).Elem())
	var tst = make([]IValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueContext)
		}
	}

	return tst
}

func (s *ArrayValueContext) Value(i int) IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *ArrayValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterArrayValue(s)
	}
}

func (s *ArrayValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitArrayValue(s)
	}
}

func (s *ArrayValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitArrayValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ArrayValue() (localctx IArrayValueContext) {
	localctx = NewArrayValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, GraphqlParserRULE_arrayValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(152)
		p.Match(GraphqlParserT__0)
	}
	p.SetState(156)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<GraphqlParserT__0)|(1<<GraphqlParserT__2)|(1<<GraphqlParserBooleanValue)|(1<<GraphqlParserNullValue)|(1<<GraphqlParserFRAGMENT)|(1<<GraphqlParserQUERY)|(1<<GraphqlParserMUTATION)|(1<<GraphqlParserSUBSCRIPTION)|(1<<GraphqlParserSCHEMA)|(1<<GraphqlParserSCALAR)|(1<<GraphqlParserTYPE)|(1<<GraphqlParserINTERFACE)|(1<<GraphqlParserIMPLEMENTS)|(1<<GraphqlParserENUM)|(1<<GraphqlParserUNION)|(1<<GraphqlParserINPUT)|(1<<GraphqlParserEXTEND)|(1<<GraphqlParserDIRECTIVE))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(GraphqlParserNAME-32))|(1<<(GraphqlParserIntValue-32))|(1<<(GraphqlParserFloatValue-32))|(1<<(GraphqlParserStringValue-32))|(1<<(GraphqlParserTripleQuotedStringValue-32)))) != 0) {
		{
			p.SetState(153)
			p.Value()
		}

		p.SetState(158)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(159)
		p.Match(GraphqlParserT__1)
	}

	return localctx
}

// IArrayValueWithVariableContext is an interface to support dynamic dispatch.
type IArrayValueWithVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayValueWithVariableContext differentiates from other interfaces.
	IsArrayValueWithVariableContext()
}

type ArrayValueWithVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayValueWithVariableContext() *ArrayValueWithVariableContext {
	var p = new(ArrayValueWithVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_arrayValueWithVariable
	return p
}

func (*ArrayValueWithVariableContext) IsArrayValueWithVariableContext() {}

func NewArrayValueWithVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayValueWithVariableContext {
	var p = new(ArrayValueWithVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_arrayValueWithVariable

	return p
}

func (s *ArrayValueWithVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayValueWithVariableContext) AllValueWithVariable() []IValueWithVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IValueWithVariableContext)(nil)).Elem())
	var tst = make([]IValueWithVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IValueWithVariableContext)
		}
	}

	return tst
}

func (s *ArrayValueWithVariableContext) ValueWithVariable(i int) IValueWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueWithVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IValueWithVariableContext)
}

func (s *ArrayValueWithVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayValueWithVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayValueWithVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterArrayValueWithVariable(s)
	}
}

func (s *ArrayValueWithVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitArrayValueWithVariable(s)
	}
}

func (s *ArrayValueWithVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitArrayValueWithVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ArrayValueWithVariable() (localctx IArrayValueWithVariableContext) {
	localctx = NewArrayValueWithVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, GraphqlParserRULE_arrayValueWithVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(161)
		p.Match(GraphqlParserT__0)
	}
	p.SetState(165)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<GraphqlParserT__0)|(1<<GraphqlParserT__2)|(1<<GraphqlParserT__8)|(1<<GraphqlParserBooleanValue)|(1<<GraphqlParserNullValue)|(1<<GraphqlParserFRAGMENT)|(1<<GraphqlParserQUERY)|(1<<GraphqlParserMUTATION)|(1<<GraphqlParserSUBSCRIPTION)|(1<<GraphqlParserSCHEMA)|(1<<GraphqlParserSCALAR)|(1<<GraphqlParserTYPE)|(1<<GraphqlParserINTERFACE)|(1<<GraphqlParserIMPLEMENTS)|(1<<GraphqlParserENUM)|(1<<GraphqlParserUNION)|(1<<GraphqlParserINPUT)|(1<<GraphqlParserEXTEND)|(1<<GraphqlParserDIRECTIVE))) != 0) || (((_la-32)&-(0x1f+1)) == 0 && ((1<<uint((_la-32)))&((1<<(GraphqlParserNAME-32))|(1<<(GraphqlParserIntValue-32))|(1<<(GraphqlParserFloatValue-32))|(1<<(GraphqlParserStringValue-32))|(1<<(GraphqlParserTripleQuotedStringValue-32)))) != 0) {
		{
			p.SetState(162)
			p.ValueWithVariable()
		}

		p.SetState(167)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(168)
		p.Match(GraphqlParserT__1)
	}

	return localctx
}

// IObjectValueContext is an interface to support dynamic dispatch.
type IObjectValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectValueContext differentiates from other interfaces.
	IsObjectValueContext()
}

type ObjectValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectValueContext() *ObjectValueContext {
	var p = new(ObjectValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectValue
	return p
}

func (*ObjectValueContext) IsObjectValueContext() {}

func NewObjectValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectValueContext {
	var p = new(ObjectValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectValue

	return p
}

func (s *ObjectValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectValueContext) AllObjectField() []IObjectFieldContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IObjectFieldContext)(nil)).Elem())
	var tst = make([]IObjectFieldContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IObjectFieldContext)
		}
	}

	return tst
}

func (s *ObjectValueContext) ObjectField(i int) IObjectFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectFieldContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IObjectFieldContext)
}

func (s *ObjectValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectValue(s)
	}
}

func (s *ObjectValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectValue(s)
	}
}

func (s *ObjectValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectValue() (localctx IObjectValueContext) {
	localctx = NewObjectValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, GraphqlParserRULE_objectValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(170)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(174)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0 {
		{
			p.SetState(171)
			p.ObjectField()
		}

		p.SetState(176)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(177)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IObjectValueWithVariableContext is an interface to support dynamic dispatch.
type IObjectValueWithVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectValueWithVariableContext differentiates from other interfaces.
	IsObjectValueWithVariableContext()
}

type ObjectValueWithVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectValueWithVariableContext() *ObjectValueWithVariableContext {
	var p = new(ObjectValueWithVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectValueWithVariable
	return p
}

func (*ObjectValueWithVariableContext) IsObjectValueWithVariableContext() {}

func NewObjectValueWithVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectValueWithVariableContext {
	var p = new(ObjectValueWithVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectValueWithVariable

	return p
}

func (s *ObjectValueWithVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectValueWithVariableContext) AllObjectFieldWithVariable() []IObjectFieldWithVariableContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IObjectFieldWithVariableContext)(nil)).Elem())
	var tst = make([]IObjectFieldWithVariableContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IObjectFieldWithVariableContext)
		}
	}

	return tst
}

func (s *ObjectValueWithVariableContext) ObjectFieldWithVariable(i int) IObjectFieldWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectFieldWithVariableContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IObjectFieldWithVariableContext)
}

func (s *ObjectValueWithVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectValueWithVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectValueWithVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectValueWithVariable(s)
	}
}

func (s *ObjectValueWithVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectValueWithVariable(s)
	}
}

func (s *ObjectValueWithVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectValueWithVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectValueWithVariable() (localctx IObjectValueWithVariableContext) {
	localctx = NewObjectValueWithVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, GraphqlParserRULE_objectValueWithVariable)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(179)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(183)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0 {
		{
			p.SetState(180)
			p.ObjectFieldWithVariable()
		}

		p.SetState(185)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(186)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IObjectFieldContext is an interface to support dynamic dispatch.
type IObjectFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectFieldContext differentiates from other interfaces.
	IsObjectFieldContext()
}

type ObjectFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectFieldContext() *ObjectFieldContext {
	var p = new(ObjectFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectField
	return p
}

func (*ObjectFieldContext) IsObjectFieldContext() {}

func NewObjectFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectFieldContext {
	var p = new(ObjectFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectField

	return p
}

func (s *ObjectFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectFieldContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ObjectFieldContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *ObjectFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectField(s)
	}
}

func (s *ObjectFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectField(s)
	}
}

func (s *ObjectFieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectField() (localctx IObjectFieldContext) {
	localctx = NewObjectFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, GraphqlParserRULE_objectField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(188)
		p.Name()
	}
	{
		p.SetState(189)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(190)
		p.Value()
	}

	return localctx
}

// IObjectFieldWithVariableContext is an interface to support dynamic dispatch.
type IObjectFieldWithVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectFieldWithVariableContext differentiates from other interfaces.
	IsObjectFieldWithVariableContext()
}

type ObjectFieldWithVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectFieldWithVariableContext() *ObjectFieldWithVariableContext {
	var p = new(ObjectFieldWithVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectFieldWithVariable
	return p
}

func (*ObjectFieldWithVariableContext) IsObjectFieldWithVariableContext() {}

func NewObjectFieldWithVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectFieldWithVariableContext {
	var p = new(ObjectFieldWithVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectFieldWithVariable

	return p
}

func (s *ObjectFieldWithVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectFieldWithVariableContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ObjectFieldWithVariableContext) ValueWithVariable() IValueWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueWithVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueWithVariableContext)
}

func (s *ObjectFieldWithVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectFieldWithVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectFieldWithVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectFieldWithVariable(s)
	}
}

func (s *ObjectFieldWithVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectFieldWithVariable(s)
	}
}

func (s *ObjectFieldWithVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectFieldWithVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectFieldWithVariable() (localctx IObjectFieldWithVariableContext) {
	localctx = NewObjectFieldWithVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, GraphqlParserRULE_objectFieldWithVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(192)
		p.Name()
	}
	{
		p.SetState(193)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(194)
		p.ValueWithVariable()
	}

	return localctx
}

// IDirectivesContext is an interface to support dynamic dispatch.
type IDirectivesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectivesContext differentiates from other interfaces.
	IsDirectivesContext()
}

type DirectivesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectivesContext() *DirectivesContext {
	var p = new(DirectivesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_directives
	return p
}

func (*DirectivesContext) IsDirectivesContext() {}

func NewDirectivesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectivesContext {
	var p = new(DirectivesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_directives

	return p
}

func (s *DirectivesContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectivesContext) AllDirective() []IDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IDirectiveContext)(nil)).Elem())
	var tst = make([]IDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IDirectiveContext)
		}
	}

	return tst
}

func (s *DirectivesContext) Directive(i int) IDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IDirectiveContext)
}

func (s *DirectivesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectivesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectivesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDirectives(s)
	}
}

func (s *DirectivesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDirectives(s)
	}
}

func (s *DirectivesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDirectives(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Directives() (localctx IDirectivesContext) {
	localctx = NewDirectivesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, GraphqlParserRULE_directives)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(197)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GraphqlParserT__5 {
		{
			p.SetState(196)
			p.Directive()
		}

		p.SetState(199)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDirectiveContext is an interface to support dynamic dispatch.
type IDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectiveContext differentiates from other interfaces.
	IsDirectiveContext()
}

type DirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectiveContext() *DirectiveContext {
	var p = new(DirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_directive
	return p
}

func (*DirectiveContext) IsDirectiveContext() {}

func NewDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectiveContext {
	var p = new(DirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_directive

	return p
}

func (s *DirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectiveContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *DirectiveContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *DirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDirective(s)
	}
}

func (s *DirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDirective(s)
	}
}

func (s *DirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Directive() (localctx IDirectiveContext) {
	localctx = NewDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, GraphqlParserRULE_directive)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(201)
		p.Match(GraphqlParserT__5)
	}
	{
		p.SetState(202)
		p.Name()
	}
	p.SetState(204)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__6 {
		{
			p.SetState(203)
			p.Arguments()
		}

	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) AllArgument() []IArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IArgumentContext)(nil)).Elem())
	var tst = make([]IArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IArgumentContext)
		}
	}

	return tst
}

func (s *ArgumentsContext) Argument(i int) IArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IArgumentContext)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterArguments(s)
	}
}

func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitArguments(s)
	}
}

func (s *ArgumentsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitArguments(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, GraphqlParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(206)
		p.Match(GraphqlParserT__6)
	}
	p.SetState(208)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0) {
		{
			p.SetState(207)
			p.Argument()
		}

		p.SetState(210)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(212)
		p.Match(GraphqlParserT__7)
	}

	return localctx
}

// IArgumentContext is an interface to support dynamic dispatch.
type IArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentContext differentiates from other interfaces.
	IsArgumentContext()
}

type ArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentContext() *ArgumentContext {
	var p = new(ArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_argument
	return p
}

func (*ArgumentContext) IsArgumentContext() {}

func NewArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentContext {
	var p = new(ArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_argument

	return p
}

func (s *ArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ArgumentContext) ValueWithVariable() IValueWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueWithVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueWithVariableContext)
}

func (s *ArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterArgument(s)
	}
}

func (s *ArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitArgument(s)
	}
}

func (s *ArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Argument() (localctx IArgumentContext) {
	localctx = NewArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, GraphqlParserRULE_argument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(214)
		p.Name()
	}
	{
		p.SetState(215)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(216)
		p.ValueWithVariable()
	}

	return localctx
}

// INameContext is an interface to support dynamic dispatch.
type INameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameContext differentiates from other interfaces.
	IsNameContext()
}

type NameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameContext() *NameContext {
	var p = new(NameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_name
	return p
}

func (*NameContext) IsNameContext() {}

func NewNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameContext {
	var p = new(NameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_name

	return p
}

func (s *NameContext) GetParser() antlr.Parser { return s.parser }

func (s *NameContext) NAME() antlr.TerminalNode {
	return s.GetToken(GraphqlParserNAME, 0)
}

func (s *NameContext) FRAGMENT() antlr.TerminalNode {
	return s.GetToken(GraphqlParserFRAGMENT, 0)
}

func (s *NameContext) QUERY() antlr.TerminalNode {
	return s.GetToken(GraphqlParserQUERY, 0)
}

func (s *NameContext) MUTATION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserMUTATION, 0)
}

func (s *NameContext) SUBSCRIPTION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSUBSCRIPTION, 0)
}

func (s *NameContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSCHEMA, 0)
}

func (s *NameContext) SCALAR() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSCALAR, 0)
}

func (s *NameContext) TYPE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserTYPE, 0)
}

func (s *NameContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINTERFACE, 0)
}

func (s *NameContext) IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(GraphqlParserIMPLEMENTS, 0)
}

func (s *NameContext) ENUM() antlr.TerminalNode {
	return s.GetToken(GraphqlParserENUM, 0)
}

func (s *NameContext) UNION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserUNION, 0)
}

func (s *NameContext) INPUT() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINPUT, 0)
}

func (s *NameContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *NameContext) DIRECTIVE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserDIRECTIVE, 0)
}

func (s *NameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterName(s)
	}
}

func (s *NameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitName(s)
	}
}

func (s *NameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Name() (localctx INameContext) {
	localctx = NewNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, GraphqlParserRULE_name)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(218)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IValueContext is an interface to support dynamic dispatch.
type IValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueContext differentiates from other interfaces.
	IsValueContext()
}

type ValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueContext() *ValueContext {
	var p = new(ValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_value
	return p
}

func (*ValueContext) IsValueContext() {}

func NewValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueContext {
	var p = new(ValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_value

	return p
}

func (s *ValueContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueContext) StringValue() IStringValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ValueContext) IntValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserIntValue, 0)
}

func (s *ValueContext) FloatValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserFloatValue, 0)
}

func (s *ValueContext) BooleanValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserBooleanValue, 0)
}

func (s *ValueContext) NullValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserNullValue, 0)
}

func (s *ValueContext) EnumValue() IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *ValueContext) ArrayValue() IArrayValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayValueContext)
}

func (s *ValueContext) ObjectValue() IObjectValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectValueContext)
}

func (s *ValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterValue(s)
	}
}

func (s *ValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitValue(s)
	}
}

func (s *ValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Value() (localctx IValueContext) {
	localctx = NewValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, GraphqlParserRULE_value)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(228)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case GraphqlParserStringValue, GraphqlParserTripleQuotedStringValue:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(220)
			p.StringValue()
		}

	case GraphqlParserIntValue:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(221)
			p.Match(GraphqlParserIntValue)
		}

	case GraphqlParserFloatValue:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(222)
			p.Match(GraphqlParserFloatValue)
		}

	case GraphqlParserBooleanValue:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(223)
			p.Match(GraphqlParserBooleanValue)
		}

	case GraphqlParserNullValue:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(224)
			p.Match(GraphqlParserNullValue)
		}

	case GraphqlParserFRAGMENT, GraphqlParserQUERY, GraphqlParserMUTATION, GraphqlParserSUBSCRIPTION, GraphqlParserSCHEMA, GraphqlParserSCALAR, GraphqlParserTYPE, GraphqlParserINTERFACE, GraphqlParserIMPLEMENTS, GraphqlParserENUM, GraphqlParserUNION, GraphqlParserINPUT, GraphqlParserEXTEND, GraphqlParserDIRECTIVE, GraphqlParserNAME:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(225)
			p.EnumValue()
		}

	case GraphqlParserT__0:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(226)
			p.ArrayValue()
		}

	case GraphqlParserT__2:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(227)
			p.ObjectValue()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IValueWithVariableContext is an interface to support dynamic dispatch.
type IValueWithVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsValueWithVariableContext differentiates from other interfaces.
	IsValueWithVariableContext()
}

type ValueWithVariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyValueWithVariableContext() *ValueWithVariableContext {
	var p = new(ValueWithVariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_valueWithVariable
	return p
}

func (*ValueWithVariableContext) IsValueWithVariableContext() {}

func NewValueWithVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ValueWithVariableContext {
	var p = new(ValueWithVariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_valueWithVariable

	return p
}

func (s *ValueWithVariableContext) GetParser() antlr.Parser { return s.parser }

func (s *ValueWithVariableContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *ValueWithVariableContext) StringValue() IStringValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *ValueWithVariableContext) IntValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserIntValue, 0)
}

func (s *ValueWithVariableContext) FloatValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserFloatValue, 0)
}

func (s *ValueWithVariableContext) BooleanValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserBooleanValue, 0)
}

func (s *ValueWithVariableContext) NullValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserNullValue, 0)
}

func (s *ValueWithVariableContext) EnumValue() IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *ValueWithVariableContext) ArrayValueWithVariable() IArrayValueWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayValueWithVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayValueWithVariableContext)
}

func (s *ValueWithVariableContext) ObjectValueWithVariable() IObjectValueWithVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectValueWithVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectValueWithVariableContext)
}

func (s *ValueWithVariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ValueWithVariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ValueWithVariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterValueWithVariable(s)
	}
}

func (s *ValueWithVariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitValueWithVariable(s)
	}
}

func (s *ValueWithVariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitValueWithVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ValueWithVariable() (localctx IValueWithVariableContext) {
	localctx = NewValueWithVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, GraphqlParserRULE_valueWithVariable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(239)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case GraphqlParserT__8:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(230)
			p.Variable()
		}

	case GraphqlParserStringValue, GraphqlParserTripleQuotedStringValue:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(231)
			p.StringValue()
		}

	case GraphqlParserIntValue:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(232)
			p.Match(GraphqlParserIntValue)
		}

	case GraphqlParserFloatValue:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(233)
			p.Match(GraphqlParserFloatValue)
		}

	case GraphqlParserBooleanValue:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(234)
			p.Match(GraphqlParserBooleanValue)
		}

	case GraphqlParserNullValue:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(235)
			p.Match(GraphqlParserNullValue)
		}

	case GraphqlParserFRAGMENT, GraphqlParserQUERY, GraphqlParserMUTATION, GraphqlParserSUBSCRIPTION, GraphqlParserSCHEMA, GraphqlParserSCALAR, GraphqlParserTYPE, GraphqlParserINTERFACE, GraphqlParserIMPLEMENTS, GraphqlParserENUM, GraphqlParserUNION, GraphqlParserINPUT, GraphqlParserEXTEND, GraphqlParserDIRECTIVE, GraphqlParserNAME:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(236)
			p.EnumValue()
		}

	case GraphqlParserT__0:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(237)
			p.ArrayValueWithVariable()
		}

	case GraphqlParserT__2:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(238)
			p.ObjectValueWithVariable()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableContext is an interface to support dynamic dispatch.
type IVariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableContext differentiates from other interfaces.
	IsVariableContext()
}

type VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableContext() *VariableContext {
	var p = new(VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_variable
	return p
}

func (*VariableContext) IsVariableContext() {}

func NewVariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableContext {
	var p = new(VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_variable

	return p
}

func (s *VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterVariable(s)
	}
}

func (s *VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitVariable(s)
	}
}

func (s *VariableContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitVariable(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Variable() (localctx IVariableContext) {
	localctx = NewVariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, GraphqlParserRULE_variable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(241)
		p.Match(GraphqlParserT__8)
	}
	{
		p.SetState(242)
		p.Name()
	}

	return localctx
}

// IDefaultValueContext is an interface to support dynamic dispatch.
type IDefaultValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDefaultValueContext differentiates from other interfaces.
	IsDefaultValueContext()
}

type DefaultValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDefaultValueContext() *DefaultValueContext {
	var p = new(DefaultValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_defaultValue
	return p
}

func (*DefaultValueContext) IsDefaultValueContext() {}

func NewDefaultValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DefaultValueContext {
	var p = new(DefaultValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_defaultValue

	return p
}

func (s *DefaultValueContext) GetParser() antlr.Parser { return s.parser }

func (s *DefaultValueContext) Value() IValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IValueContext)
}

func (s *DefaultValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DefaultValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DefaultValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDefaultValue(s)
	}
}

func (s *DefaultValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDefaultValue(s)
	}
}

func (s *DefaultValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDefaultValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) DefaultValue() (localctx IDefaultValueContext) {
	localctx = NewDefaultValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, GraphqlParserRULE_defaultValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(244)
		p.Match(GraphqlParserT__9)
	}
	{
		p.SetState(245)
		p.Value()
	}

	return localctx
}

// IStringValueContext is an interface to support dynamic dispatch.
type IStringValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringValueContext differentiates from other interfaces.
	IsStringValueContext()
}

type StringValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringValueContext() *StringValueContext {
	var p = new(StringValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_stringValue
	return p
}

func (*StringValueContext) IsStringValueContext() {}

func NewStringValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringValueContext {
	var p = new(StringValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_stringValue

	return p
}

func (s *StringValueContext) GetParser() antlr.Parser { return s.parser }

func (s *StringValueContext) TripleQuotedStringValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserTripleQuotedStringValue, 0)
}

func (s *StringValueContext) StringValue() antlr.TerminalNode {
	return s.GetToken(GraphqlParserStringValue, 0)
}

func (s *StringValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterStringValue(s)
	}
}

func (s *StringValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitStringValue(s)
	}
}

func (s *StringValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitStringValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) StringValue() (localctx IStringValueContext) {
	localctx = NewStringValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, GraphqlParserRULE_stringValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(247)
		_la = p.GetTokenStream().LA(1)

		if !(_la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IGqlTypeContext is an interface to support dynamic dispatch.
type IGqlTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGqlTypeContext differentiates from other interfaces.
	IsGqlTypeContext()
}

type GqlTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGqlTypeContext() *GqlTypeContext {
	var p = new(GqlTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_gqlType
	return p
}

func (*GqlTypeContext) IsGqlTypeContext() {}

func NewGqlTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GqlTypeContext {
	var p = new(GqlTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_gqlType

	return p
}

func (s *GqlTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *GqlTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *GqlTypeContext) ListType() IListTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListTypeContext)
}

func (s *GqlTypeContext) NonNullType() INonNullTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INonNullTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INonNullTypeContext)
}

func (s *GqlTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GqlTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GqlTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterGqlType(s)
	}
}

func (s *GqlTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitGqlType(s)
	}
}

func (s *GqlTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitGqlType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) GqlType() (localctx IGqlTypeContext) {
	localctx = NewGqlTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, GraphqlParserRULE_gqlType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(252)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(249)
			p.TypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(250)
			p.ListType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(251)
			p.NonNullType()
		}

	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, GraphqlParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(254)
		p.Name()
	}

	return localctx
}

// IListTypeContext is an interface to support dynamic dispatch.
type IListTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsListTypeContext differentiates from other interfaces.
	IsListTypeContext()
}

type ListTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListTypeContext() *ListTypeContext {
	var p = new(ListTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_listType
	return p
}

func (*ListTypeContext) IsListTypeContext() {}

func NewListTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListTypeContext {
	var p = new(ListTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_listType

	return p
}

func (s *ListTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ListTypeContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *ListTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterListType(s)
	}
}

func (s *ListTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitListType(s)
	}
}

func (s *ListTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitListType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ListType() (localctx IListTypeContext) {
	localctx = NewListTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, GraphqlParserRULE_listType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(256)
		p.Match(GraphqlParserT__0)
	}
	{
		p.SetState(257)
		p.GqlType()
	}
	{
		p.SetState(258)
		p.Match(GraphqlParserT__1)
	}

	return localctx
}

// INonNullTypeContext is an interface to support dynamic dispatch.
type INonNullTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNonNullTypeContext differentiates from other interfaces.
	IsNonNullTypeContext()
}

type NonNullTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNonNullTypeContext() *NonNullTypeContext {
	var p = new(NonNullTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_nonNullType
	return p
}

func (*NonNullTypeContext) IsNonNullTypeContext() {}

func NewNonNullTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NonNullTypeContext {
	var p = new(NonNullTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_nonNullType

	return p
}

func (s *NonNullTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *NonNullTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *NonNullTypeContext) ListType() IListTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IListTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IListTypeContext)
}

func (s *NonNullTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NonNullTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NonNullTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterNonNullType(s)
	}
}

func (s *NonNullTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitNonNullType(s)
	}
}

func (s *NonNullTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitNonNullType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) NonNullType() (localctx INonNullTypeContext) {
	localctx = NewNonNullTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, GraphqlParserRULE_nonNullType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(266)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case GraphqlParserFRAGMENT, GraphqlParserQUERY, GraphqlParserMUTATION, GraphqlParserSUBSCRIPTION, GraphqlParserSCHEMA, GraphqlParserSCALAR, GraphqlParserTYPE, GraphqlParserINTERFACE, GraphqlParserIMPLEMENTS, GraphqlParserENUM, GraphqlParserUNION, GraphqlParserINPUT, GraphqlParserEXTEND, GraphqlParserDIRECTIVE, GraphqlParserNAME:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(260)
			p.TypeName()
		}
		{
			p.SetState(261)
			p.Match(GraphqlParserT__10)
		}

	case GraphqlParserT__0:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(263)
			p.ListType()
		}
		{
			p.SetState(264)
			p.Match(GraphqlParserT__10)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperationDefinitionContext is an interface to support dynamic dispatch.
type IOperationDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperationDefinitionContext differentiates from other interfaces.
	IsOperationDefinitionContext()
}

type OperationDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperationDefinitionContext() *OperationDefinitionContext {
	var p = new(OperationDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_operationDefinition
	return p
}

func (*OperationDefinitionContext) IsOperationDefinitionContext() {}

func NewOperationDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperationDefinitionContext {
	var p = new(OperationDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_operationDefinition

	return p
}

func (s *OperationDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *OperationDefinitionContext) SelectionSet() ISelectionSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionSetContext)
}

func (s *OperationDefinitionContext) OperationType() IOperationTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperationTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperationTypeContext)
}

func (s *OperationDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *OperationDefinitionContext) VariableDefinitions() IVariableDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDefinitionsContext)
}

func (s *OperationDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *OperationDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperationDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperationDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterOperationDefinition(s)
	}
}

func (s *OperationDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitOperationDefinition(s)
	}
}

func (s *OperationDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitOperationDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) OperationDefinition() (localctx IOperationDefinitionContext) {
	localctx = NewOperationDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, GraphqlParserRULE_operationDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(281)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case GraphqlParserT__2:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(268)
			p.SelectionSet()
		}

	case GraphqlParserQUERY, GraphqlParserMUTATION, GraphqlParserSUBSCRIPTION:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(269)
			p.OperationType()
		}
		p.SetState(271)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0 {
			{
				p.SetState(270)
				p.Name()
			}

		}
		p.SetState(274)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__6 {
			{
				p.SetState(273)
				p.VariableDefinitions()
			}

		}
		p.SetState(277)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(276)
				p.Directives()
			}

		}
		{
			p.SetState(279)
			p.SelectionSet()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVariableDefinitionsContext is an interface to support dynamic dispatch.
type IVariableDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDefinitionsContext differentiates from other interfaces.
	IsVariableDefinitionsContext()
}

type VariableDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDefinitionsContext() *VariableDefinitionsContext {
	var p = new(VariableDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_variableDefinitions
	return p
}

func (*VariableDefinitionsContext) IsVariableDefinitionsContext() {}

func NewVariableDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDefinitionsContext {
	var p = new(VariableDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_variableDefinitions

	return p
}

func (s *VariableDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDefinitionsContext) AllVariableDefinition() []IVariableDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDefinitionContext)(nil)).Elem())
	var tst = make([]IVariableDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDefinitionContext)
		}
	}

	return tst
}

func (s *VariableDefinitionsContext) VariableDefinition(i int) IVariableDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDefinitionContext)
}

func (s *VariableDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterVariableDefinitions(s)
	}
}

func (s *VariableDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitVariableDefinitions(s)
	}
}

func (s *VariableDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitVariableDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) VariableDefinitions() (localctx IVariableDefinitionsContext) {
	localctx = NewVariableDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, GraphqlParserRULE_variableDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(283)
		p.Match(GraphqlParserT__6)
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == GraphqlParserT__8 {
		{
			p.SetState(284)
			p.VariableDefinition()
		}

		p.SetState(287)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(289)
		p.Match(GraphqlParserT__7)
	}

	return localctx
}

// IVariableDefinitionContext is an interface to support dynamic dispatch.
type IVariableDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDefinitionContext differentiates from other interfaces.
	IsVariableDefinitionContext()
}

type VariableDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDefinitionContext() *VariableDefinitionContext {
	var p = new(VariableDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_variableDefinition
	return p
}

func (*VariableDefinitionContext) IsVariableDefinitionContext() {}

func NewVariableDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDefinitionContext {
	var p = new(VariableDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_variableDefinition

	return p
}

func (s *VariableDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDefinitionContext) Variable() IVariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableContext)
}

func (s *VariableDefinitionContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *VariableDefinitionContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *VariableDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterVariableDefinition(s)
	}
}

func (s *VariableDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitVariableDefinition(s)
	}
}

func (s *VariableDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitVariableDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) VariableDefinition() (localctx IVariableDefinitionContext) {
	localctx = NewVariableDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, GraphqlParserRULE_variableDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(291)
		p.Variable()
	}
	{
		p.SetState(292)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(293)
		p.GqlType()
	}
	p.SetState(295)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__9 {
		{
			p.SetState(294)
			p.DefaultValue()
		}

	}

	return localctx
}

// ISelectionSetContext is an interface to support dynamic dispatch.
type ISelectionSetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectionSetContext differentiates from other interfaces.
	IsSelectionSetContext()
}

type SelectionSetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionSetContext() *SelectionSetContext {
	var p = new(SelectionSetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_selectionSet
	return p
}

func (*SelectionSetContext) IsSelectionSetContext() {}

func NewSelectionSetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionSetContext {
	var p = new(SelectionSetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_selectionSet

	return p
}

func (s *SelectionSetContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionSetContext) AllSelection() []ISelectionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISelectionContext)(nil)).Elem())
	var tst = make([]ISelectionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISelectionContext)
		}
	}

	return tst
}

func (s *SelectionSetContext) Selection(i int) ISelectionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISelectionContext)
}

func (s *SelectionSetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionSetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectionSetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterSelectionSet(s)
	}
}

func (s *SelectionSetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitSelectionSet(s)
	}
}

func (s *SelectionSetContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitSelectionSet(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) SelectionSet() (localctx ISelectionSetContext) {
	localctx = NewSelectionSetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, GraphqlParserRULE_selectionSet)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(297)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-12)&-(0x1f+1)) == 0 && ((1<<uint((_la-12)))&((1<<(GraphqlParserT__11-12))|(1<<(GraphqlParserFRAGMENT-12))|(1<<(GraphqlParserQUERY-12))|(1<<(GraphqlParserMUTATION-12))|(1<<(GraphqlParserSUBSCRIPTION-12))|(1<<(GraphqlParserSCHEMA-12))|(1<<(GraphqlParserSCALAR-12))|(1<<(GraphqlParserTYPE-12))|(1<<(GraphqlParserINTERFACE-12))|(1<<(GraphqlParserIMPLEMENTS-12))|(1<<(GraphqlParserENUM-12))|(1<<(GraphqlParserUNION-12))|(1<<(GraphqlParserINPUT-12))|(1<<(GraphqlParserEXTEND-12))|(1<<(GraphqlParserDIRECTIVE-12))|(1<<(GraphqlParserNAME-12)))) != 0) {
		{
			p.SetState(298)
			p.Selection()
		}

		p.SetState(301)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(303)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// ISelectionContext is an interface to support dynamic dispatch.
type ISelectionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectionContext differentiates from other interfaces.
	IsSelectionContext()
}

type SelectionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectionContext() *SelectionContext {
	var p = new(SelectionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_selection
	return p
}

func (*SelectionContext) IsSelectionContext() {}

func NewSelectionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectionContext {
	var p = new(SelectionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_selection

	return p
}

func (s *SelectionContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectionContext) Field() IFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldContext)
}

func (s *SelectionContext) FragmentSpread() IFragmentSpreadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragmentSpreadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFragmentSpreadContext)
}

func (s *SelectionContext) InlineFragment() IInlineFragmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInlineFragmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInlineFragmentContext)
}

func (s *SelectionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterSelection(s)
	}
}

func (s *SelectionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitSelection(s)
	}
}

func (s *SelectionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitSelection(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Selection() (localctx ISelectionContext) {
	localctx = NewSelectionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, GraphqlParserRULE_selection)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(305)
			p.Field()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(306)
			p.FragmentSpread()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(307)
			p.InlineFragment()
		}

	}

	return localctx
}

// IFieldContext is an interface to support dynamic dispatch.
type IFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldContext differentiates from other interfaces.
	IsFieldContext()
}

type FieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldContext() *FieldContext {
	var p = new(FieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_field
	return p
}

func (*FieldContext) IsFieldContext() {}

func NewFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldContext {
	var p = new(FieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_field

	return p
}

func (s *FieldContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FieldContext) Alias() IAliasContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAliasContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAliasContext)
}

func (s *FieldContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *FieldContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *FieldContext) SelectionSet() ISelectionSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionSetContext)
}

func (s *FieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterField(s)
	}
}

func (s *FieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitField(s)
	}
}

func (s *FieldContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitField(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Field() (localctx IFieldContext) {
	localctx = NewFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, GraphqlParserRULE_field)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(311)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(310)
			p.Alias()
		}

	}
	{
		p.SetState(313)
		p.Name()
	}
	p.SetState(315)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__6 {
		{
			p.SetState(314)
			p.Arguments()
		}

	}
	p.SetState(318)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(317)
			p.Directives()
		}

	}
	p.SetState(321)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(320)
			p.SelectionSet()
		}

	}

	return localctx
}

// IAliasContext is an interface to support dynamic dispatch.
type IAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAliasContext differentiates from other interfaces.
	IsAliasContext()
}

type AliasContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAliasContext() *AliasContext {
	var p = new(AliasContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_alias
	return p
}

func (*AliasContext) IsAliasContext() {}

func NewAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AliasContext {
	var p = new(AliasContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_alias

	return p
}

func (s *AliasContext) GetParser() antlr.Parser { return s.parser }

func (s *AliasContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *AliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterAlias(s)
	}
}

func (s *AliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitAlias(s)
	}
}

func (s *AliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Alias() (localctx IAliasContext) {
	localctx = NewAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, GraphqlParserRULE_alias)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(323)
		p.Name()
	}
	{
		p.SetState(324)
		p.Match(GraphqlParserT__4)
	}

	return localctx
}

// IFragmentSpreadContext is an interface to support dynamic dispatch.
type IFragmentSpreadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFragmentSpreadContext differentiates from other interfaces.
	IsFragmentSpreadContext()
}

type FragmentSpreadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFragmentSpreadContext() *FragmentSpreadContext {
	var p = new(FragmentSpreadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_fragmentSpread
	return p
}

func (*FragmentSpreadContext) IsFragmentSpreadContext() {}

func NewFragmentSpreadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FragmentSpreadContext {
	var p = new(FragmentSpreadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_fragmentSpread

	return p
}

func (s *FragmentSpreadContext) GetParser() antlr.Parser { return s.parser }

func (s *FragmentSpreadContext) FragmentName() IFragmentNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragmentNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFragmentNameContext)
}

func (s *FragmentSpreadContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *FragmentSpreadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FragmentSpreadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FragmentSpreadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterFragmentSpread(s)
	}
}

func (s *FragmentSpreadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitFragmentSpread(s)
	}
}

func (s *FragmentSpreadContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitFragmentSpread(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) FragmentSpread() (localctx IFragmentSpreadContext) {
	localctx = NewFragmentSpreadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, GraphqlParserRULE_fragmentSpread)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(326)
		p.Match(GraphqlParserT__11)
	}
	{
		p.SetState(327)
		p.FragmentName()
	}
	p.SetState(329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(328)
			p.Directives()
		}

	}

	return localctx
}

// IInlineFragmentContext is an interface to support dynamic dispatch.
type IInlineFragmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineFragmentContext differentiates from other interfaces.
	IsInlineFragmentContext()
}

type InlineFragmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineFragmentContext() *InlineFragmentContext {
	var p = new(InlineFragmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_inlineFragment
	return p
}

func (*InlineFragmentContext) IsInlineFragmentContext() {}

func NewInlineFragmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineFragmentContext {
	var p = new(InlineFragmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_inlineFragment

	return p
}

func (s *InlineFragmentContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineFragmentContext) SelectionSet() ISelectionSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionSetContext)
}

func (s *InlineFragmentContext) TypeCondition() ITypeConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConditionContext)
}

func (s *InlineFragmentContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InlineFragmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineFragmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineFragmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInlineFragment(s)
	}
}

func (s *InlineFragmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInlineFragment(s)
	}
}

func (s *InlineFragmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInlineFragment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InlineFragment() (localctx IInlineFragmentContext) {
	localctx = NewInlineFragmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, GraphqlParserRULE_inlineFragment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(331)
		p.Match(GraphqlParserT__11)
	}
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__12 {
		{
			p.SetState(332)
			p.TypeCondition()
		}

	}
	p.SetState(336)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(335)
			p.Directives()
		}

	}
	{
		p.SetState(338)
		p.SelectionSet()
	}

	return localctx
}

// IFragmentDefinitionContext is an interface to support dynamic dispatch.
type IFragmentDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFragmentDefinitionContext differentiates from other interfaces.
	IsFragmentDefinitionContext()
}

type FragmentDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFragmentDefinitionContext() *FragmentDefinitionContext {
	var p = new(FragmentDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_fragmentDefinition
	return p
}

func (*FragmentDefinitionContext) IsFragmentDefinitionContext() {}

func NewFragmentDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FragmentDefinitionContext {
	var p = new(FragmentDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_fragmentDefinition

	return p
}

func (s *FragmentDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FragmentDefinitionContext) FragmentName() IFragmentNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragmentNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFragmentNameContext)
}

func (s *FragmentDefinitionContext) TypeCondition() ITypeConditionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeConditionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeConditionContext)
}

func (s *FragmentDefinitionContext) SelectionSet() ISelectionSetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectionSetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectionSetContext)
}

func (s *FragmentDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *FragmentDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FragmentDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FragmentDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterFragmentDefinition(s)
	}
}

func (s *FragmentDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitFragmentDefinition(s)
	}
}

func (s *FragmentDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitFragmentDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) FragmentDefinition() (localctx IFragmentDefinitionContext) {
	localctx = NewFragmentDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, GraphqlParserRULE_fragmentDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(340)
		p.Match(GraphqlParserFRAGMENT)
	}
	{
		p.SetState(341)
		p.FragmentName()
	}
	{
		p.SetState(342)
		p.TypeCondition()
	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(343)
			p.Directives()
		}

	}
	{
		p.SetState(346)
		p.SelectionSet()
	}

	return localctx
}

// IFragmentNameContext is an interface to support dynamic dispatch.
type IFragmentNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFragmentNameContext differentiates from other interfaces.
	IsFragmentNameContext()
}

type FragmentNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFragmentNameContext() *FragmentNameContext {
	var p = new(FragmentNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_fragmentName
	return p
}

func (*FragmentNameContext) IsFragmentNameContext() {}

func NewFragmentNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FragmentNameContext {
	var p = new(FragmentNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_fragmentName

	return p
}

func (s *FragmentNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FragmentNameContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FragmentNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FragmentNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FragmentNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterFragmentName(s)
	}
}

func (s *FragmentNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitFragmentName(s)
	}
}

func (s *FragmentNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitFragmentName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) FragmentName() (localctx IFragmentNameContext) {
	localctx = NewFragmentNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, GraphqlParserRULE_fragmentName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(348)
		p.Name()
	}

	return localctx
}

// ITypeConditionContext is an interface to support dynamic dispatch.
type ITypeConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeConditionContext differentiates from other interfaces.
	IsTypeConditionContext()
}

type TypeConditionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConditionContext() *TypeConditionContext {
	var p = new(TypeConditionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_typeCondition
	return p
}

func (*TypeConditionContext) IsTypeConditionContext() {}

func NewTypeConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConditionContext {
	var p = new(TypeConditionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_typeCondition

	return p
}

func (s *TypeConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConditionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterTypeCondition(s)
	}
}

func (s *TypeConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitTypeCondition(s)
	}
}

func (s *TypeConditionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitTypeCondition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) TypeCondition() (localctx ITypeConditionContext) {
	localctx = NewTypeConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, GraphqlParserRULE_typeCondition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(350)
		p.Match(GraphqlParserT__12)
	}
	{
		p.SetState(351)
		p.TypeName()
	}

	return localctx
}

// IDocumentContext is an interface to support dynamic dispatch.
type IDocumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDocumentContext differentiates from other interfaces.
	IsDocumentContext()
}

type DocumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDocumentContext() *DocumentContext {
	var p = new(DocumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_document
	return p
}

func (*DocumentContext) IsDocumentContext() {}

func NewDocumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DocumentContext {
	var p = new(DocumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_document

	return p
}

func (s *DocumentContext) GetParser() antlr.Parser { return s.parser }

func (s *DocumentContext) AllOperationDefinition() []IOperationDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperationDefinitionContext)(nil)).Elem())
	var tst = make([]IOperationDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperationDefinitionContext)
		}
	}

	return tst
}

func (s *DocumentContext) OperationDefinition(i int) IOperationDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperationDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperationDefinitionContext)
}

func (s *DocumentContext) AllFragmentDefinition() []IFragmentDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFragmentDefinitionContext)(nil)).Elem())
	var tst = make([]IFragmentDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFragmentDefinitionContext)
		}
	}

	return tst
}

func (s *DocumentContext) FragmentDefinition(i int) IFragmentDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFragmentDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFragmentDefinitionContext)
}

func (s *DocumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DocumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DocumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDocument(s)
	}
}

func (s *DocumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDocument(s)
	}
}

func (s *DocumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDocument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Document() (localctx IDocumentContext) {
	localctx = NewDocumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, GraphqlParserRULE_document)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(355)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<GraphqlParserT__2)|(1<<GraphqlParserFRAGMENT)|(1<<GraphqlParserQUERY)|(1<<GraphqlParserMUTATION)|(1<<GraphqlParserSUBSCRIPTION))) != 0) {
		p.SetState(355)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case GraphqlParserT__2, GraphqlParserQUERY, GraphqlParserMUTATION, GraphqlParserSUBSCRIPTION:
			{
				p.SetState(353)
				p.OperationDefinition()
			}

		case GraphqlParserFRAGMENT:
			{
				p.SetState(354)
				p.FragmentDefinition()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(357)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IDescriptionContext is an interface to support dynamic dispatch.
type IDescriptionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDescriptionContext differentiates from other interfaces.
	IsDescriptionContext()
}

type DescriptionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDescriptionContext() *DescriptionContext {
	var p = new(DescriptionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_description
	return p
}

func (*DescriptionContext) IsDescriptionContext() {}

func NewDescriptionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DescriptionContext {
	var p = new(DescriptionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_description

	return p
}

func (s *DescriptionContext) GetParser() antlr.Parser { return s.parser }

func (s *DescriptionContext) StringValue() IStringValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringValueContext)
}

func (s *DescriptionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DescriptionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DescriptionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDescription(s)
	}
}

func (s *DescriptionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDescription(s)
	}
}

func (s *DescriptionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDescription(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) Description() (localctx IDescriptionContext) {
	localctx = NewDescriptionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, GraphqlParserRULE_description)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		p.StringValue()
	}

	return localctx
}

// ITypeSystemDefinitionContext is an interface to support dynamic dispatch.
type ITypeSystemDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSystemDefinitionContext differentiates from other interfaces.
	IsTypeSystemDefinitionContext()
}

type TypeSystemDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSystemDefinitionContext() *TypeSystemDefinitionContext {
	var p = new(TypeSystemDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_typeSystemDefinition
	return p
}

func (*TypeSystemDefinitionContext) IsTypeSystemDefinitionContext() {}

func NewTypeSystemDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSystemDefinitionContext {
	var p = new(TypeSystemDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_typeSystemDefinition

	return p
}

func (s *TypeSystemDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSystemDefinitionContext) SchemaDefinition() ISchemaDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISchemaDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISchemaDefinitionContext)
}

func (s *TypeSystemDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *TypeSystemDefinitionContext) TypeDefinition() ITypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDefinitionContext)
}

func (s *TypeSystemDefinitionContext) TypeExtension() ITypeExtensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeExtensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeExtensionContext)
}

func (s *TypeSystemDefinitionContext) DirectiveDefinition() IDirectiveDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectiveDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectiveDefinitionContext)
}

func (s *TypeSystemDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSystemDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSystemDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterTypeSystemDefinition(s)
	}
}

func (s *TypeSystemDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitTypeSystemDefinition(s)
	}
}

func (s *TypeSystemDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitTypeSystemDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) TypeSystemDefinition() (localctx ITypeSystemDefinitionContext) {
	localctx = NewTypeSystemDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, GraphqlParserRULE_typeSystemDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(368)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(362)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(361)
				p.Description()
			}

		}
		{
			p.SetState(364)
			p.SchemaDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(365)
			p.TypeDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(366)
			p.TypeExtension()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(367)
			p.DirectiveDefinition()
		}

	}

	return localctx
}

// ISchemaDefinitionContext is an interface to support dynamic dispatch.
type ISchemaDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSchemaDefinitionContext differentiates from other interfaces.
	IsSchemaDefinitionContext()
}

type SchemaDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySchemaDefinitionContext() *SchemaDefinitionContext {
	var p = new(SchemaDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_schemaDefinition
	return p
}

func (*SchemaDefinitionContext) IsSchemaDefinitionContext() {}

func NewSchemaDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SchemaDefinitionContext {
	var p = new(SchemaDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_schemaDefinition

	return p
}

func (s *SchemaDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *SchemaDefinitionContext) SCHEMA() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSCHEMA, 0)
}

func (s *SchemaDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *SchemaDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *SchemaDefinitionContext) AllOperationTypeDefinition() []IOperationTypeDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOperationTypeDefinitionContext)(nil)).Elem())
	var tst = make([]IOperationTypeDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOperationTypeDefinitionContext)
		}
	}

	return tst
}

func (s *SchemaDefinitionContext) OperationTypeDefinition(i int) IOperationTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperationTypeDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOperationTypeDefinitionContext)
}

func (s *SchemaDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SchemaDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SchemaDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterSchemaDefinition(s)
	}
}

func (s *SchemaDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitSchemaDefinition(s)
	}
}

func (s *SchemaDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitSchemaDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) SchemaDefinition() (localctx ISchemaDefinitionContext) {
	localctx = NewSchemaDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, GraphqlParserRULE_schemaDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(370)
			p.Description()
		}

	}
	{
		p.SetState(373)
		p.Match(GraphqlParserSCHEMA)
	}
	p.SetState(375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(374)
			p.Directives()
		}

	}
	{
		p.SetState(377)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-19)&-(0x1f+1)) == 0 && ((1<<uint((_la-19)))&((1<<(GraphqlParserQUERY-19))|(1<<(GraphqlParserMUTATION-19))|(1<<(GraphqlParserSUBSCRIPTION-19))|(1<<(GraphqlParserStringValue-19))|(1<<(GraphqlParserTripleQuotedStringValue-19)))) != 0) {
		{
			p.SetState(378)
			p.OperationTypeDefinition()
		}

		p.SetState(381)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(383)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IOperationTypeDefinitionContext is an interface to support dynamic dispatch.
type IOperationTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperationTypeDefinitionContext differentiates from other interfaces.
	IsOperationTypeDefinitionContext()
}

type OperationTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperationTypeDefinitionContext() *OperationTypeDefinitionContext {
	var p = new(OperationTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_operationTypeDefinition
	return p
}

func (*OperationTypeDefinitionContext) IsOperationTypeDefinitionContext() {}

func NewOperationTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperationTypeDefinitionContext {
	var p = new(OperationTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_operationTypeDefinition

	return p
}

func (s *OperationTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *OperationTypeDefinitionContext) OperationType() IOperationTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperationTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperationTypeContext)
}

func (s *OperationTypeDefinitionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *OperationTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *OperationTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperationTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperationTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterOperationTypeDefinition(s)
	}
}

func (s *OperationTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitOperationTypeDefinition(s)
	}
}

func (s *OperationTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitOperationTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) OperationTypeDefinition() (localctx IOperationTypeDefinitionContext) {
	localctx = NewOperationTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, GraphqlParserRULE_operationTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(386)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(385)
			p.Description()
		}

	}
	{
		p.SetState(388)
		p.OperationType()
	}
	{
		p.SetState(389)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(390)
		p.TypeName()
	}

	return localctx
}

// ITypeDefinitionContext is an interface to support dynamic dispatch.
type ITypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDefinitionContext differentiates from other interfaces.
	IsTypeDefinitionContext()
}

type TypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDefinitionContext() *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_typeDefinition
	return p
}

func (*TypeDefinitionContext) IsTypeDefinitionContext() {}

func NewTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_typeDefinition

	return p
}

func (s *TypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDefinitionContext) ScalarTypeDefinition() IScalarTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalarTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalarTypeDefinitionContext)
}

func (s *TypeDefinitionContext) ObjectTypeDefinition() IObjectTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectTypeDefinitionContext)
}

func (s *TypeDefinitionContext) InterfaceTypeDefinition() IInterfaceTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeDefinitionContext)
}

func (s *TypeDefinitionContext) UnionTypeDefinition() IUnionTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionTypeDefinitionContext)
}

func (s *TypeDefinitionContext) EnumTypeDefinition() IEnumTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumTypeDefinitionContext)
}

func (s *TypeDefinitionContext) InputObjectTypeDefinition() IInputObjectTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputObjectTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputObjectTypeDefinitionContext)
}

func (s *TypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterTypeDefinition(s)
	}
}

func (s *TypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitTypeDefinition(s)
	}
}

func (s *TypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) TypeDefinition() (localctx ITypeDefinitionContext) {
	localctx = NewTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, GraphqlParserRULE_typeDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(392)
			p.ScalarTypeDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(393)
			p.ObjectTypeDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(394)
			p.InterfaceTypeDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(395)
			p.UnionTypeDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(396)
			p.EnumTypeDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(397)
			p.InputObjectTypeDefinition()
		}

	}

	return localctx
}

// ITypeExtensionContext is an interface to support dynamic dispatch.
type ITypeExtensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeExtensionContext differentiates from other interfaces.
	IsTypeExtensionContext()
}

type TypeExtensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeExtensionContext() *TypeExtensionContext {
	var p = new(TypeExtensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_typeExtension
	return p
}

func (*TypeExtensionContext) IsTypeExtensionContext() {}

func NewTypeExtensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeExtensionContext {
	var p = new(TypeExtensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_typeExtension

	return p
}

func (s *TypeExtensionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeExtensionContext) ObjectTypeExtensionDefinition() IObjectTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IObjectTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IObjectTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) InterfaceTypeExtensionDefinition() IInterfaceTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) UnionTypeExtensionDefinition() IUnionTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) ScalarTypeExtensionDefinition() IScalarTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IScalarTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IScalarTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) EnumTypeExtensionDefinition() IEnumTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) InputObjectTypeExtensionDefinition() IInputObjectTypeExtensionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputObjectTypeExtensionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputObjectTypeExtensionDefinitionContext)
}

func (s *TypeExtensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeExtensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeExtensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterTypeExtension(s)
	}
}

func (s *TypeExtensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitTypeExtension(s)
	}
}

func (s *TypeExtensionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitTypeExtension(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) TypeExtension() (localctx ITypeExtensionContext) {
	localctx = NewTypeExtensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, GraphqlParserRULE_typeExtension)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(406)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 36, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(400)
			p.ObjectTypeExtensionDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(401)
			p.InterfaceTypeExtensionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(402)
			p.UnionTypeExtensionDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(403)
			p.ScalarTypeExtensionDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(404)
			p.EnumTypeExtensionDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(405)
			p.InputObjectTypeExtensionDefinition()
		}

	}

	return localctx
}

// IScalarTypeDefinitionContext is an interface to support dynamic dispatch.
type IScalarTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalarTypeDefinitionContext differentiates from other interfaces.
	IsScalarTypeDefinitionContext()
}

type ScalarTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalarTypeDefinitionContext() *ScalarTypeDefinitionContext {
	var p = new(ScalarTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_scalarTypeDefinition
	return p
}

func (*ScalarTypeDefinitionContext) IsScalarTypeDefinitionContext() {}

func NewScalarTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScalarTypeDefinitionContext {
	var p = new(ScalarTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_scalarTypeDefinition

	return p
}

func (s *ScalarTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScalarTypeDefinitionContext) SCALAR() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSCALAR, 0)
}

func (s *ScalarTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ScalarTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *ScalarTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *ScalarTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScalarTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterScalarTypeDefinition(s)
	}
}

func (s *ScalarTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitScalarTypeDefinition(s)
	}
}

func (s *ScalarTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitScalarTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ScalarTypeDefinition() (localctx IScalarTypeDefinitionContext) {
	localctx = NewScalarTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, GraphqlParserRULE_scalarTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(409)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(408)
			p.Description()
		}

	}
	{
		p.SetState(411)
		p.Match(GraphqlParserSCALAR)
	}
	{
		p.SetState(412)
		p.Name()
	}
	p.SetState(414)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(413)
			p.Directives()
		}

	}

	return localctx
}

// IScalarTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IScalarTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsScalarTypeExtensionDefinitionContext differentiates from other interfaces.
	IsScalarTypeExtensionDefinitionContext()
}

type ScalarTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScalarTypeExtensionDefinitionContext() *ScalarTypeExtensionDefinitionContext {
	var p = new(ScalarTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_scalarTypeExtensionDefinition
	return p
}

func (*ScalarTypeExtensionDefinitionContext) IsScalarTypeExtensionDefinitionContext() {}

func NewScalarTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScalarTypeExtensionDefinitionContext {
	var p = new(ScalarTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_scalarTypeExtensionDefinition

	return p
}

func (s *ScalarTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ScalarTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *ScalarTypeExtensionDefinitionContext) SCALAR() antlr.TerminalNode {
	return s.GetToken(GraphqlParserSCALAR, 0)
}

func (s *ScalarTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ScalarTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *ScalarTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScalarTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScalarTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterScalarTypeExtensionDefinition(s)
	}
}

func (s *ScalarTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitScalarTypeExtensionDefinition(s)
	}
}

func (s *ScalarTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitScalarTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ScalarTypeExtensionDefinition() (localctx IScalarTypeExtensionDefinitionContext) {
	localctx = NewScalarTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, GraphqlParserRULE_scalarTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(416)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(417)
		p.Match(GraphqlParserSCALAR)
	}
	{
		p.SetState(418)
		p.Name()
	}
	p.SetState(420)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(419)
			p.Directives()
		}

	}

	return localctx
}

// IObjectTypeDefinitionContext is an interface to support dynamic dispatch.
type IObjectTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectTypeDefinitionContext differentiates from other interfaces.
	IsObjectTypeDefinitionContext()
}

type ObjectTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectTypeDefinitionContext() *ObjectTypeDefinitionContext {
	var p = new(ObjectTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectTypeDefinition
	return p
}

func (*ObjectTypeDefinitionContext) IsObjectTypeDefinitionContext() {}

func NewObjectTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectTypeDefinitionContext {
	var p = new(ObjectTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectTypeDefinition

	return p
}

func (s *ObjectTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectTypeDefinitionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserTYPE, 0)
}

func (s *ObjectTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ObjectTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *ObjectTypeDefinitionContext) ImplementsInterfaces() IImplementsInterfacesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementsInterfacesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementsInterfacesContext)
}

func (s *ObjectTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *ObjectTypeDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *ObjectTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectTypeDefinition(s)
	}
}

func (s *ObjectTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectTypeDefinition(s)
	}
}

func (s *ObjectTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectTypeDefinition() (localctx IObjectTypeDefinitionContext) {
	localctx = NewObjectTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, GraphqlParserRULE_objectTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(422)
			p.Description()
		}

	}
	{
		p.SetState(425)
		p.Match(GraphqlParserTYPE)
	}
	{
		p.SetState(426)
		p.Name()
	}
	p.SetState(428)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserIMPLEMENTS {
		{
			p.SetState(427)
			p.implementsInterfaces(0)
		}

	}
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(430)
			p.Directives()
		}

	}
	p.SetState(434)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(433)
			p.FieldsDefinition()
		}

	}

	return localctx
}

// IObjectTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IObjectTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsObjectTypeExtensionDefinitionContext differentiates from other interfaces.
	IsObjectTypeExtensionDefinitionContext()
}

type ObjectTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyObjectTypeExtensionDefinitionContext() *ObjectTypeExtensionDefinitionContext {
	var p = new(ObjectTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_objectTypeExtensionDefinition
	return p
}

func (*ObjectTypeExtensionDefinitionContext) IsObjectTypeExtensionDefinitionContext() {}

func NewObjectTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ObjectTypeExtensionDefinitionContext {
	var p = new(ObjectTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_objectTypeExtensionDefinition

	return p
}

func (s *ObjectTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ObjectTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *ObjectTypeExtensionDefinitionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserTYPE, 0)
}

func (s *ObjectTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *ObjectTypeExtensionDefinitionContext) ImplementsInterfaces() IImplementsInterfacesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementsInterfacesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementsInterfacesContext)
}

func (s *ObjectTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *ObjectTypeExtensionDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *ObjectTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ObjectTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ObjectTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterObjectTypeExtensionDefinition(s)
	}
}

func (s *ObjectTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitObjectTypeExtensionDefinition(s)
	}
}

func (s *ObjectTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitObjectTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ObjectTypeExtensionDefinition() (localctx IObjectTypeExtensionDefinitionContext) {
	localctx = NewObjectTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, GraphqlParserRULE_objectTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(436)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(437)
		p.Match(GraphqlParserTYPE)
	}
	{
		p.SetState(438)
		p.Name()
	}
	p.SetState(440)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserIMPLEMENTS {
		{
			p.SetState(439)
			p.implementsInterfaces(0)
		}

	}
	p.SetState(443)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(442)
			p.Directives()
		}

	}
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(445)
			p.FieldsDefinition()
		}

	}

	return localctx
}

// IImplementsInterfacesContext is an interface to support dynamic dispatch.
type IImplementsInterfacesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImplementsInterfacesContext differentiates from other interfaces.
	IsImplementsInterfacesContext()
}

type ImplementsInterfacesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplementsInterfacesContext() *ImplementsInterfacesContext {
	var p = new(ImplementsInterfacesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_implementsInterfaces
	return p
}

func (*ImplementsInterfacesContext) IsImplementsInterfacesContext() {}

func NewImplementsInterfacesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplementsInterfacesContext {
	var p = new(ImplementsInterfacesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_implementsInterfaces

	return p
}

func (s *ImplementsInterfacesContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplementsInterfacesContext) IMPLEMENTS() antlr.TerminalNode {
	return s.GetToken(GraphqlParserIMPLEMENTS, 0)
}

func (s *ImplementsInterfacesContext) AllTypeName() []ITypeNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeNameContext)(nil)).Elem())
	var tst = make([]ITypeNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeNameContext)
		}
	}

	return tst
}

func (s *ImplementsInterfacesContext) TypeName(i int) ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ImplementsInterfacesContext) ImplementsInterfaces() IImplementsInterfacesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementsInterfacesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementsInterfacesContext)
}

func (s *ImplementsInterfacesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplementsInterfacesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplementsInterfacesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterImplementsInterfaces(s)
	}
}

func (s *ImplementsInterfacesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitImplementsInterfaces(s)
	}
}

func (s *ImplementsInterfacesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitImplementsInterfaces(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ImplementsInterfaces() (localctx IImplementsInterfacesContext) {
	return p.implementsInterfaces(0)
}

func (p *GraphqlParser) implementsInterfaces(_p int) (localctx IImplementsInterfacesContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewImplementsInterfacesContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IImplementsInterfacesContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 90
	p.EnterRecursionRule(localctx, 90, GraphqlParserRULE_implementsInterfaces, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(449)
		p.Match(GraphqlParserIMPLEMENTS)
	}
	p.SetState(451)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__13 {
		{
			p.SetState(450)
			p.Match(GraphqlParserT__13)
		}

	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(453)
				p.TypeName()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(456)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewImplementsInterfacesContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GraphqlParserRULE_implementsInterfaces)
			p.SetState(458)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(459)
				p.Match(GraphqlParserT__13)
			}
			{
				p.SetState(460)
				p.TypeName()
			}

		}
		p.SetState(465)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 49, p.GetParserRuleContext())
	}

	return localctx
}

// IFieldsDefinitionContext is an interface to support dynamic dispatch.
type IFieldsDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldsDefinitionContext differentiates from other interfaces.
	IsFieldsDefinitionContext()
}

type FieldsDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldsDefinitionContext() *FieldsDefinitionContext {
	var p = new(FieldsDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_fieldsDefinition
	return p
}

func (*FieldsDefinitionContext) IsFieldsDefinitionContext() {}

func NewFieldsDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldsDefinitionContext {
	var p = new(FieldsDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_fieldsDefinition

	return p
}

func (s *FieldsDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldsDefinitionContext) AllFieldDefinition() []IFieldDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldDefinitionContext)(nil)).Elem())
	var tst = make([]IFieldDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldDefinitionContext)
		}
	}

	return tst
}

func (s *FieldsDefinitionContext) FieldDefinition(i int) IFieldDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldDefinitionContext)
}

func (s *FieldsDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldsDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldsDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterFieldsDefinition(s)
	}
}

func (s *FieldsDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitFieldsDefinition(s)
	}
}

func (s *FieldsDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitFieldsDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) FieldsDefinition() (localctx IFieldsDefinitionContext) {
	localctx = NewFieldsDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, GraphqlParserRULE_fieldsDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(466)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18))|(1<<(GraphqlParserStringValue-18))|(1<<(GraphqlParserTripleQuotedStringValue-18)))) != 0 {
		{
			p.SetState(467)
			p.FieldDefinition()
		}

		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(473)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IFieldDefinitionContext is an interface to support dynamic dispatch.
type IFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldDefinitionContext differentiates from other interfaces.
	IsFieldDefinitionContext()
}

type FieldDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldDefinitionContext() *FieldDefinitionContext {
	var p = new(FieldDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_fieldDefinition
	return p
}

func (*FieldDefinitionContext) IsFieldDefinitionContext() {}

func NewFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDefinitionContext {
	var p = new(FieldDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_fieldDefinition

	return p
}

func (s *FieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *FieldDefinitionContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *FieldDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *FieldDefinitionContext) ArgumentsDefinition() IArgumentsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsDefinitionContext)
}

func (s *FieldDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *FieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterFieldDefinition(s)
	}
}

func (s *FieldDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitFieldDefinition(s)
	}
}

func (s *FieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) FieldDefinition() (localctx IFieldDefinitionContext) {
	localctx = NewFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, GraphqlParserRULE_fieldDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(475)
			p.Description()
		}

	}
	{
		p.SetState(478)
		p.Name()
	}
	p.SetState(480)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__6 {
		{
			p.SetState(479)
			p.ArgumentsDefinition()
		}

	}
	{
		p.SetState(482)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(483)
		p.GqlType()
	}
	p.SetState(485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(484)
			p.Directives()
		}

	}

	return localctx
}

// IArgumentsDefinitionContext is an interface to support dynamic dispatch.
type IArgumentsDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsDefinitionContext differentiates from other interfaces.
	IsArgumentsDefinitionContext()
}

type ArgumentsDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsDefinitionContext() *ArgumentsDefinitionContext {
	var p = new(ArgumentsDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_argumentsDefinition
	return p
}

func (*ArgumentsDefinitionContext) IsArgumentsDefinitionContext() {}

func NewArgumentsDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsDefinitionContext {
	var p = new(ArgumentsDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_argumentsDefinition

	return p
}

func (s *ArgumentsDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsDefinitionContext) AllInputValueDefinition() []IInputValueDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInputValueDefinitionContext)(nil)).Elem())
	var tst = make([]IInputValueDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInputValueDefinitionContext)
		}
	}

	return tst
}

func (s *ArgumentsDefinitionContext) InputValueDefinition(i int) IInputValueDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputValueDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInputValueDefinitionContext)
}

func (s *ArgumentsDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterArgumentsDefinition(s)
	}
}

func (s *ArgumentsDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitArgumentsDefinition(s)
	}
}

func (s *ArgumentsDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitArgumentsDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) ArgumentsDefinition() (localctx IArgumentsDefinitionContext) {
	localctx = NewArgumentsDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, GraphqlParserRULE_argumentsDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(487)
		p.Match(GraphqlParserT__6)
	}
	p.SetState(489)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18))|(1<<(GraphqlParserStringValue-18))|(1<<(GraphqlParserTripleQuotedStringValue-18)))) != 0) {
		{
			p.SetState(488)
			p.InputValueDefinition()
		}

		p.SetState(491)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(493)
		p.Match(GraphqlParserT__7)
	}

	return localctx
}

// IInputValueDefinitionContext is an interface to support dynamic dispatch.
type IInputValueDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputValueDefinitionContext differentiates from other interfaces.
	IsInputValueDefinitionContext()
}

type InputValueDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputValueDefinitionContext() *InputValueDefinitionContext {
	var p = new(InputValueDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_inputValueDefinition
	return p
}

func (*InputValueDefinitionContext) IsInputValueDefinitionContext() {}

func NewInputValueDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputValueDefinitionContext {
	var p = new(InputValueDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_inputValueDefinition

	return p
}

func (s *InputValueDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InputValueDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InputValueDefinitionContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *InputValueDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *InputValueDefinitionContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *InputValueDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InputValueDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputValueDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputValueDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInputValueDefinition(s)
	}
}

func (s *InputValueDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInputValueDefinition(s)
	}
}

func (s *InputValueDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInputValueDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InputValueDefinition() (localctx IInputValueDefinitionContext) {
	localctx = NewInputValueDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, GraphqlParserRULE_inputValueDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(495)
			p.Description()
		}

	}
	{
		p.SetState(498)
		p.Name()
	}
	{
		p.SetState(499)
		p.Match(GraphqlParserT__4)
	}
	{
		p.SetState(500)
		p.GqlType()
	}
	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__9 {
		{
			p.SetState(501)
			p.DefaultValue()
		}

	}
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(504)
			p.Directives()
		}

	}

	return localctx
}

// IInterfaceTypeDefinitionContext is an interface to support dynamic dispatch.
type IInterfaceTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceTypeDefinitionContext differentiates from other interfaces.
	IsInterfaceTypeDefinitionContext()
}

type InterfaceTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeDefinitionContext() *InterfaceTypeDefinitionContext {
	var p = new(InterfaceTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_interfaceTypeDefinition
	return p
}

func (*InterfaceTypeDefinitionContext) IsInterfaceTypeDefinitionContext() {}

func NewInterfaceTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeDefinitionContext {
	var p = new(InterfaceTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_interfaceTypeDefinition

	return p
}

func (s *InterfaceTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeDefinitionContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINTERFACE, 0)
}

func (s *InterfaceTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InterfaceTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *InterfaceTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InterfaceTypeDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *InterfaceTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInterfaceTypeDefinition(s)
	}
}

func (s *InterfaceTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInterfaceTypeDefinition(s)
	}
}

func (s *InterfaceTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInterfaceTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InterfaceTypeDefinition() (localctx IInterfaceTypeDefinitionContext) {
	localctx = NewInterfaceTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, GraphqlParserRULE_interfaceTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(507)
			p.Description()
		}

	}
	{
		p.SetState(510)
		p.Match(GraphqlParserINTERFACE)
	}
	{
		p.SetState(511)
		p.Name()
	}
	p.SetState(513)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(512)
			p.Directives()
		}

	}
	p.SetState(516)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(515)
			p.FieldsDefinition()
		}

	}

	return localctx
}

// IInterfaceTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IInterfaceTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceTypeExtensionDefinitionContext differentiates from other interfaces.
	IsInterfaceTypeExtensionDefinitionContext()
}

type InterfaceTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeExtensionDefinitionContext() *InterfaceTypeExtensionDefinitionContext {
	var p = new(InterfaceTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_interfaceTypeExtensionDefinition
	return p
}

func (*InterfaceTypeExtensionDefinitionContext) IsInterfaceTypeExtensionDefinitionContext() {}

func NewInterfaceTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeExtensionDefinitionContext {
	var p = new(InterfaceTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_interfaceTypeExtensionDefinition

	return p
}

func (s *InterfaceTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *InterfaceTypeExtensionDefinitionContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINTERFACE, 0)
}

func (s *InterfaceTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InterfaceTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InterfaceTypeExtensionDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *InterfaceTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInterfaceTypeExtensionDefinition(s)
	}
}

func (s *InterfaceTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInterfaceTypeExtensionDefinition(s)
	}
}

func (s *InterfaceTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInterfaceTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InterfaceTypeExtensionDefinition() (localctx IInterfaceTypeExtensionDefinitionContext) {
	localctx = NewInterfaceTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, GraphqlParserRULE_interfaceTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(518)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(519)
		p.Match(GraphqlParserINTERFACE)
	}
	{
		p.SetState(520)
		p.Name()
	}
	p.SetState(522)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(521)
			p.Directives()
		}

	}
	p.SetState(525)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(524)
			p.FieldsDefinition()
		}

	}

	return localctx
}

// IUnionTypeDefinitionContext is an interface to support dynamic dispatch.
type IUnionTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionTypeDefinitionContext differentiates from other interfaces.
	IsUnionTypeDefinitionContext()
}

type UnionTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionTypeDefinitionContext() *UnionTypeDefinitionContext {
	var p = new(UnionTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_unionTypeDefinition
	return p
}

func (*UnionTypeDefinitionContext) IsUnionTypeDefinitionContext() {}

func NewUnionTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionTypeDefinitionContext {
	var p = new(UnionTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_unionTypeDefinition

	return p
}

func (s *UnionTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionTypeDefinitionContext) UNION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserUNION, 0)
}

func (s *UnionTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *UnionTypeDefinitionContext) UnionMembership() IUnionMembershipContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionMembershipContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionMembershipContext)
}

func (s *UnionTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *UnionTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *UnionTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterUnionTypeDefinition(s)
	}
}

func (s *UnionTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitUnionTypeDefinition(s)
	}
}

func (s *UnionTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitUnionTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) UnionTypeDefinition() (localctx IUnionTypeDefinitionContext) {
	localctx = NewUnionTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, GraphqlParserRULE_unionTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(527)
			p.Description()
		}

	}
	{
		p.SetState(530)
		p.Match(GraphqlParserUNION)
	}
	{
		p.SetState(531)
		p.Name()
	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(532)
			p.Directives()
		}

	}
	{
		p.SetState(535)
		p.UnionMembership()
	}

	return localctx
}

// IUnionTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IUnionTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionTypeExtensionDefinitionContext differentiates from other interfaces.
	IsUnionTypeExtensionDefinitionContext()
}

type UnionTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionTypeExtensionDefinitionContext() *UnionTypeExtensionDefinitionContext {
	var p = new(UnionTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_unionTypeExtensionDefinition
	return p
}

func (*UnionTypeExtensionDefinitionContext) IsUnionTypeExtensionDefinitionContext() {}

func NewUnionTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionTypeExtensionDefinitionContext {
	var p = new(UnionTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_unionTypeExtensionDefinition

	return p
}

func (s *UnionTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *UnionTypeExtensionDefinitionContext) UNION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserUNION, 0)
}

func (s *UnionTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *UnionTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *UnionTypeExtensionDefinitionContext) UnionMembership() IUnionMembershipContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionMembershipContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionMembershipContext)
}

func (s *UnionTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterUnionTypeExtensionDefinition(s)
	}
}

func (s *UnionTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitUnionTypeExtensionDefinition(s)
	}
}

func (s *UnionTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitUnionTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) UnionTypeExtensionDefinition() (localctx IUnionTypeExtensionDefinitionContext) {
	localctx = NewUnionTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, GraphqlParserRULE_unionTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(538)
		p.Match(GraphqlParserUNION)
	}
	{
		p.SetState(539)
		p.Name()
	}
	p.SetState(541)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(540)
			p.Directives()
		}

	}
	p.SetState(544)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__9 {
		{
			p.SetState(543)
			p.UnionMembership()
		}

	}

	return localctx
}

// IUnionMembershipContext is an interface to support dynamic dispatch.
type IUnionMembershipContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionMembershipContext differentiates from other interfaces.
	IsUnionMembershipContext()
}

type UnionMembershipContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionMembershipContext() *UnionMembershipContext {
	var p = new(UnionMembershipContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_unionMembership
	return p
}

func (*UnionMembershipContext) IsUnionMembershipContext() {}

func NewUnionMembershipContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionMembershipContext {
	var p = new(UnionMembershipContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_unionMembership

	return p
}

func (s *UnionMembershipContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionMembershipContext) UnionMembers() IUnionMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionMembersContext)
}

func (s *UnionMembershipContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionMembershipContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionMembershipContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterUnionMembership(s)
	}
}

func (s *UnionMembershipContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitUnionMembership(s)
	}
}

func (s *UnionMembershipContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitUnionMembership(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) UnionMembership() (localctx IUnionMembershipContext) {
	localctx = NewUnionMembershipContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, GraphqlParserRULE_unionMembership)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(546)
		p.Match(GraphqlParserT__9)
	}
	{
		p.SetState(547)
		p.unionMembers(0)
	}

	return localctx
}

// IUnionMembersContext is an interface to support dynamic dispatch.
type IUnionMembersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnionMembersContext differentiates from other interfaces.
	IsUnionMembersContext()
}

type UnionMembersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnionMembersContext() *UnionMembersContext {
	var p = new(UnionMembersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_unionMembers
	return p
}

func (*UnionMembersContext) IsUnionMembersContext() {}

func NewUnionMembersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnionMembersContext {
	var p = new(UnionMembersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_unionMembers

	return p
}

func (s *UnionMembersContext) GetParser() antlr.Parser { return s.parser }

func (s *UnionMembersContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UnionMembersContext) UnionMembers() IUnionMembersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionMembersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionMembersContext)
}

func (s *UnionMembersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnionMembersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnionMembersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterUnionMembers(s)
	}
}

func (s *UnionMembersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitUnionMembers(s)
	}
}

func (s *UnionMembersContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitUnionMembers(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) UnionMembers() (localctx IUnionMembersContext) {
	return p.unionMembers(0)
}

func (p *GraphqlParser) unionMembers(_p int) (localctx IUnionMembersContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewUnionMembersContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IUnionMembersContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 110
	p.EnterRecursionRule(localctx, 110, GraphqlParserRULE_unionMembers, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__14 {
		{
			p.SetState(550)
			p.Match(GraphqlParserT__14)
		}

	}
	{
		p.SetState(553)
		p.TypeName()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(560)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewUnionMembersContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GraphqlParserRULE_unionMembers)
			p.SetState(555)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(556)
				p.Match(GraphqlParserT__14)
			}
			{
				p.SetState(557)
				p.TypeName()
			}

		}
		p.SetState(562)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext())
	}

	return localctx
}

// IEnumTypeDefinitionContext is an interface to support dynamic dispatch.
type IEnumTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumTypeDefinitionContext differentiates from other interfaces.
	IsEnumTypeDefinitionContext()
}

type EnumTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumTypeDefinitionContext() *EnumTypeDefinitionContext {
	var p = new(EnumTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_enumTypeDefinition
	return p
}

func (*EnumTypeDefinitionContext) IsEnumTypeDefinitionContext() {}

func NewEnumTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumTypeDefinitionContext {
	var p = new(EnumTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_enumTypeDefinition

	return p
}

func (s *EnumTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumTypeDefinitionContext) ENUM() antlr.TerminalNode {
	return s.GetToken(GraphqlParserENUM, 0)
}

func (s *EnumTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EnumTypeDefinitionContext) EnumValueDefinitions() IEnumValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueDefinitionsContext)
}

func (s *EnumTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *EnumTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *EnumTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterEnumTypeDefinition(s)
	}
}

func (s *EnumTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitEnumTypeDefinition(s)
	}
}

func (s *EnumTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitEnumTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) EnumTypeDefinition() (localctx IEnumTypeDefinitionContext) {
	localctx = NewEnumTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, GraphqlParserRULE_enumTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(564)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(563)
			p.Description()
		}

	}
	{
		p.SetState(566)
		p.Match(GraphqlParserENUM)
	}
	{
		p.SetState(567)
		p.Name()
	}
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(568)
			p.Directives()
		}

	}
	{
		p.SetState(571)
		p.EnumValueDefinitions()
	}

	return localctx
}

// IEnumTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IEnumTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumTypeExtensionDefinitionContext differentiates from other interfaces.
	IsEnumTypeExtensionDefinitionContext()
}

type EnumTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumTypeExtensionDefinitionContext() *EnumTypeExtensionDefinitionContext {
	var p = new(EnumTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_enumTypeExtensionDefinition
	return p
}

func (*EnumTypeExtensionDefinitionContext) IsEnumTypeExtensionDefinitionContext() {}

func NewEnumTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumTypeExtensionDefinitionContext {
	var p = new(EnumTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_enumTypeExtensionDefinition

	return p
}

func (s *EnumTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *EnumTypeExtensionDefinitionContext) ENUM() antlr.TerminalNode {
	return s.GetToken(GraphqlParserENUM, 0)
}

func (s *EnumTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *EnumTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *EnumTypeExtensionDefinitionContext) EnumValueDefinitions() IEnumValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueDefinitionsContext)
}

func (s *EnumTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterEnumTypeExtensionDefinition(s)
	}
}

func (s *EnumTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitEnumTypeExtensionDefinition(s)
	}
}

func (s *EnumTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitEnumTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) EnumTypeExtensionDefinition() (localctx IEnumTypeExtensionDefinitionContext) {
	localctx = NewEnumTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, GraphqlParserRULE_enumTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(573)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(574)
		p.Match(GraphqlParserENUM)
	}
	{
		p.SetState(575)
		p.Name()
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(576)
			p.Directives()
		}

	}
	p.SetState(580)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(579)
			p.EnumValueDefinitions()
		}

	}

	return localctx
}

// IEnumValueDefinitionsContext is an interface to support dynamic dispatch.
type IEnumValueDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueDefinitionsContext differentiates from other interfaces.
	IsEnumValueDefinitionsContext()
}

type EnumValueDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueDefinitionsContext() *EnumValueDefinitionsContext {
	var p = new(EnumValueDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_enumValueDefinitions
	return p
}

func (*EnumValueDefinitionsContext) IsEnumValueDefinitionsContext() {}

func NewEnumValueDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueDefinitionsContext {
	var p = new(EnumValueDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_enumValueDefinitions

	return p
}

func (s *EnumValueDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueDefinitionsContext) AllEnumValueDefinition() []IEnumValueDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumValueDefinitionContext)(nil)).Elem())
	var tst = make([]IEnumValueDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumValueDefinitionContext)
		}
	}

	return tst
}

func (s *EnumValueDefinitionsContext) EnumValueDefinition(i int) IEnumValueDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumValueDefinitionContext)
}

func (s *EnumValueDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterEnumValueDefinitions(s)
	}
}

func (s *EnumValueDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitEnumValueDefinitions(s)
	}
}

func (s *EnumValueDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitEnumValueDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) EnumValueDefinitions() (localctx IEnumValueDefinitionsContext) {
	localctx = NewEnumValueDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, GraphqlParserRULE_enumValueDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(582)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(584)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18))|(1<<(GraphqlParserStringValue-18))|(1<<(GraphqlParserTripleQuotedStringValue-18)))) != 0) {
		{
			p.SetState(583)
			p.EnumValueDefinition()
		}

		p.SetState(586)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(588)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IEnumValueDefinitionContext is an interface to support dynamic dispatch.
type IEnumValueDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueDefinitionContext differentiates from other interfaces.
	IsEnumValueDefinitionContext()
}

type EnumValueDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueDefinitionContext() *EnumValueDefinitionContext {
	var p = new(EnumValueDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_enumValueDefinition
	return p
}

func (*EnumValueDefinitionContext) IsEnumValueDefinitionContext() {}

func NewEnumValueDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueDefinitionContext {
	var p = new(EnumValueDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_enumValueDefinition

	return p
}

func (s *EnumValueDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueDefinitionContext) EnumValue() IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *EnumValueDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *EnumValueDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *EnumValueDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumValueDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterEnumValueDefinition(s)
	}
}

func (s *EnumValueDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitEnumValueDefinition(s)
	}
}

func (s *EnumValueDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitEnumValueDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) EnumValueDefinition() (localctx IEnumValueDefinitionContext) {
	localctx = NewEnumValueDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, GraphqlParserRULE_enumValueDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(590)
			p.Description()
		}

	}
	{
		p.SetState(593)
		p.EnumValue()
	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(594)
			p.Directives()
		}

	}

	return localctx
}

// IInputObjectTypeDefinitionContext is an interface to support dynamic dispatch.
type IInputObjectTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputObjectTypeDefinitionContext differentiates from other interfaces.
	IsInputObjectTypeDefinitionContext()
}

type InputObjectTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputObjectTypeDefinitionContext() *InputObjectTypeDefinitionContext {
	var p = new(InputObjectTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_inputObjectTypeDefinition
	return p
}

func (*InputObjectTypeDefinitionContext) IsInputObjectTypeDefinitionContext() {}

func NewInputObjectTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputObjectTypeDefinitionContext {
	var p = new(InputObjectTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_inputObjectTypeDefinition

	return p
}

func (s *InputObjectTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InputObjectTypeDefinitionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINPUT, 0)
}

func (s *InputObjectTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InputObjectTypeDefinitionContext) InputObjectValueDefinitions() IInputObjectValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputObjectValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputObjectValueDefinitionsContext)
}

func (s *InputObjectTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *InputObjectTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InputObjectTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputObjectTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputObjectTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInputObjectTypeDefinition(s)
	}
}

func (s *InputObjectTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInputObjectTypeDefinition(s)
	}
}

func (s *InputObjectTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInputObjectTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InputObjectTypeDefinition() (localctx IInputObjectTypeDefinitionContext) {
	localctx = NewInputObjectTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, GraphqlParserRULE_inputObjectTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(598)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(597)
			p.Description()
		}

	}
	{
		p.SetState(600)
		p.Match(GraphqlParserINPUT)
	}
	{
		p.SetState(601)
		p.Name()
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(602)
			p.Directives()
		}

	}
	{
		p.SetState(605)
		p.InputObjectValueDefinitions()
	}

	return localctx
}

// IInputObjectTypeExtensionDefinitionContext is an interface to support dynamic dispatch.
type IInputObjectTypeExtensionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputObjectTypeExtensionDefinitionContext differentiates from other interfaces.
	IsInputObjectTypeExtensionDefinitionContext()
}

type InputObjectTypeExtensionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputObjectTypeExtensionDefinitionContext() *InputObjectTypeExtensionDefinitionContext {
	var p = new(InputObjectTypeExtensionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_inputObjectTypeExtensionDefinition
	return p
}

func (*InputObjectTypeExtensionDefinitionContext) IsInputObjectTypeExtensionDefinitionContext() {}

func NewInputObjectTypeExtensionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputObjectTypeExtensionDefinitionContext {
	var p = new(InputObjectTypeExtensionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_inputObjectTypeExtensionDefinition

	return p
}

func (s *InputObjectTypeExtensionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InputObjectTypeExtensionDefinitionContext) EXTEND() antlr.TerminalNode {
	return s.GetToken(GraphqlParserEXTEND, 0)
}

func (s *InputObjectTypeExtensionDefinitionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINPUT, 0)
}

func (s *InputObjectTypeExtensionDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *InputObjectTypeExtensionDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *InputObjectTypeExtensionDefinitionContext) InputObjectValueDefinitions() IInputObjectValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputObjectValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputObjectValueDefinitionsContext)
}

func (s *InputObjectTypeExtensionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputObjectTypeExtensionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputObjectTypeExtensionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInputObjectTypeExtensionDefinition(s)
	}
}

func (s *InputObjectTypeExtensionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInputObjectTypeExtensionDefinition(s)
	}
}

func (s *InputObjectTypeExtensionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInputObjectTypeExtensionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InputObjectTypeExtensionDefinition() (localctx IInputObjectTypeExtensionDefinitionContext) {
	localctx = NewInputObjectTypeExtensionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, GraphqlParserRULE_inputObjectTypeExtensionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(607)
		p.Match(GraphqlParserEXTEND)
	}
	{
		p.SetState(608)
		p.Match(GraphqlParserINPUT)
	}
	{
		p.SetState(609)
		p.Name()
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(610)
			p.Directives()
		}

	}
	p.SetState(614)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__2 {
		{
			p.SetState(613)
			p.InputObjectValueDefinitions()
		}

	}

	return localctx
}

// IInputObjectValueDefinitionsContext is an interface to support dynamic dispatch.
type IInputObjectValueDefinitionsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInputObjectValueDefinitionsContext differentiates from other interfaces.
	IsInputObjectValueDefinitionsContext()
}

type InputObjectValueDefinitionsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInputObjectValueDefinitionsContext() *InputObjectValueDefinitionsContext {
	var p = new(InputObjectValueDefinitionsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_inputObjectValueDefinitions
	return p
}

func (*InputObjectValueDefinitionsContext) IsInputObjectValueDefinitionsContext() {}

func NewInputObjectValueDefinitionsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InputObjectValueDefinitionsContext {
	var p = new(InputObjectValueDefinitionsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_inputObjectValueDefinitions

	return p
}

func (s *InputObjectValueDefinitionsContext) GetParser() antlr.Parser { return s.parser }

func (s *InputObjectValueDefinitionsContext) AllInputValueDefinition() []IInputValueDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInputValueDefinitionContext)(nil)).Elem())
	var tst = make([]IInputValueDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInputValueDefinitionContext)
		}
	}

	return tst
}

func (s *InputObjectValueDefinitionsContext) InputValueDefinition(i int) IInputValueDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputValueDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInputValueDefinitionContext)
}

func (s *InputObjectValueDefinitionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InputObjectValueDefinitionsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InputObjectValueDefinitionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterInputObjectValueDefinitions(s)
	}
}

func (s *InputObjectValueDefinitionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitInputObjectValueDefinitions(s)
	}
}

func (s *InputObjectValueDefinitionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitInputObjectValueDefinitions(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) InputObjectValueDefinitions() (localctx IInputObjectValueDefinitionsContext) {
	localctx = NewInputObjectValueDefinitionsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, GraphqlParserRULE_inputObjectValueDefinitions)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(616)
		p.Match(GraphqlParserT__2)
	}
	p.SetState(618)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = (((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18))|(1<<(GraphqlParserStringValue-18))|(1<<(GraphqlParserTripleQuotedStringValue-18)))) != 0) {
		{
			p.SetState(617)
			p.InputValueDefinition()
		}

		p.SetState(620)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(622)
		p.Match(GraphqlParserT__3)
	}

	return localctx
}

// IDirectiveDefinitionContext is an interface to support dynamic dispatch.
type IDirectiveDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectiveDefinitionContext differentiates from other interfaces.
	IsDirectiveDefinitionContext()
}

type DirectiveDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectiveDefinitionContext() *DirectiveDefinitionContext {
	var p = new(DirectiveDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_directiveDefinition
	return p
}

func (*DirectiveDefinitionContext) IsDirectiveDefinitionContext() {}

func NewDirectiveDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectiveDefinitionContext {
	var p = new(DirectiveDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_directiveDefinition

	return p
}

func (s *DirectiveDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectiveDefinitionContext) DIRECTIVE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserDIRECTIVE, 0)
}

func (s *DirectiveDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *DirectiveDefinitionContext) DirectiveLocations() IDirectiveLocationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectiveLocationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectiveLocationsContext)
}

func (s *DirectiveDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *DirectiveDefinitionContext) ArgumentsDefinition() IArgumentsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsDefinitionContext)
}

func (s *DirectiveDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectiveDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectiveDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDirectiveDefinition(s)
	}
}

func (s *DirectiveDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDirectiveDefinition(s)
	}
}

func (s *DirectiveDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDirectiveDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) DirectiveDefinition() (localctx IDirectiveDefinitionContext) {
	localctx = NewDirectiveDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, GraphqlParserRULE_directiveDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(625)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(624)
			p.Description()
		}

	}
	{
		p.SetState(627)
		p.Match(GraphqlParserDIRECTIVE)
	}
	{
		p.SetState(628)
		p.Match(GraphqlParserT__5)
	}
	{
		p.SetState(629)
		p.Name()
	}
	p.SetState(631)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__6 {
		{
			p.SetState(630)
			p.ArgumentsDefinition()
		}

	}
	{
		p.SetState(633)
		p.Match(GraphqlParserT__12)
	}
	{
		p.SetState(634)
		p.directiveLocations(0)
	}

	return localctx
}

// IDirectiveLocationContext is an interface to support dynamic dispatch.
type IDirectiveLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectiveLocationContext differentiates from other interfaces.
	IsDirectiveLocationContext()
}

type DirectiveLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectiveLocationContext() *DirectiveLocationContext {
	var p = new(DirectiveLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_directiveLocation
	return p
}

func (*DirectiveLocationContext) IsDirectiveLocationContext() {}

func NewDirectiveLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectiveLocationContext {
	var p = new(DirectiveLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_directiveLocation

	return p
}

func (s *DirectiveLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectiveLocationContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *DirectiveLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectiveLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectiveLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDirectiveLocation(s)
	}
}

func (s *DirectiveLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDirectiveLocation(s)
	}
}

func (s *DirectiveLocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDirectiveLocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) DirectiveLocation() (localctx IDirectiveLocationContext) {
	localctx = NewDirectiveLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, GraphqlParserRULE_directiveLocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.Name()
	}

	return localctx
}

// IDirectiveLocationsContext is an interface to support dynamic dispatch.
type IDirectiveLocationsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDirectiveLocationsContext differentiates from other interfaces.
	IsDirectiveLocationsContext()
}

type DirectiveLocationsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDirectiveLocationsContext() *DirectiveLocationsContext {
	var p = new(DirectiveLocationsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_directiveLocations
	return p
}

func (*DirectiveLocationsContext) IsDirectiveLocationsContext() {}

func NewDirectiveLocationsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DirectiveLocationsContext {
	var p = new(DirectiveLocationsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_directiveLocations

	return p
}

func (s *DirectiveLocationsContext) GetParser() antlr.Parser { return s.parser }

func (s *DirectiveLocationsContext) DirectiveLocation() IDirectiveLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectiveLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectiveLocationContext)
}

func (s *DirectiveLocationsContext) DirectiveLocations() IDirectiveLocationsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectiveLocationsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectiveLocationsContext)
}

func (s *DirectiveLocationsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DirectiveLocationsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DirectiveLocationsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterDirectiveLocations(s)
	}
}

func (s *DirectiveLocationsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitDirectiveLocations(s)
	}
}

func (s *DirectiveLocationsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitDirectiveLocations(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) DirectiveLocations() (localctx IDirectiveLocationsContext) {
	return p.directiveLocations(0)
}

func (p *GraphqlParser) directiveLocations(_p int) (localctx IDirectiveLocationsContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewDirectiveLocationsContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IDirectiveLocationsContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 130
	p.EnterRecursionRule(localctx, 130, GraphqlParserRULE_directiveLocations, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(639)
		p.DirectiveLocation()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(646)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewDirectiveLocationsContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, GraphqlParserRULE_directiveLocations)
			p.SetState(641)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(642)
				p.Match(GraphqlParserT__14)
			}
			{
				p.SetState(643)
				p.DirectiveLocation()
			}

		}
		p.SetState(648)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext())
	}

	return localctx
}

// IPartialFieldDefinitionContext is an interface to support dynamic dispatch.
type IPartialFieldDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialFieldDefinitionContext differentiates from other interfaces.
	IsPartialFieldDefinitionContext()
}

type PartialFieldDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialFieldDefinitionContext() *PartialFieldDefinitionContext {
	var p = new(PartialFieldDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialFieldDefinition
	return p
}

func (*PartialFieldDefinitionContext) IsPartialFieldDefinitionContext() {}

func NewPartialFieldDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialFieldDefinitionContext {
	var p = new(PartialFieldDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialFieldDefinition

	return p
}

func (s *PartialFieldDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialFieldDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialFieldDefinitionContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *PartialFieldDefinitionContext) ArgumentsDefinition() IArgumentsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsDefinitionContext)
}

func (s *PartialFieldDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialFieldDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialFieldDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialFieldDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialFieldDefinition(s)
	}
}

func (s *PartialFieldDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialFieldDefinition(s)
	}
}

func (s *PartialFieldDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialFieldDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialFieldDefinition() (localctx IPartialFieldDefinitionContext) {
	localctx = NewPartialFieldDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, GraphqlParserRULE_partialFieldDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(678)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(649)
			p.Name()
		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__6 {
			{
				p.SetState(650)
				p.ArgumentsDefinition()
			}

		}
		{
			p.SetState(653)
			p.Match(GraphqlParserT__4)
		}
		{
			p.SetState(654)
			p.GqlType()
		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(655)
				p.Directives()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(658)
			p.ArgumentsDefinition()
		}
		{
			p.SetState(659)
			p.Match(GraphqlParserT__4)
		}
		{
			p.SetState(660)
			p.GqlType()
		}
		p.SetState(662)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(661)
				p.Directives()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(664)
			p.Name()
		}
		p.SetState(666)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__6 {
			{
				p.SetState(665)
				p.ArgumentsDefinition()
			}

		}
		p.SetState(669)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(668)
				p.Directives()
			}

		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(671)
			p.Match(GraphqlParserT__4)
		}
		{
			p.SetState(672)
			p.GqlType()
		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(673)
				p.Directives()
			}

		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(676)
			p.ArgumentsDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(677)
			p.Directives()
		}

	}

	return localctx
}

// IPartialObjectTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialObjectTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialObjectTypeDefinitionContext differentiates from other interfaces.
	IsPartialObjectTypeDefinitionContext()
}

type PartialObjectTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialObjectTypeDefinitionContext() *PartialObjectTypeDefinitionContext {
	var p = new(PartialObjectTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialObjectTypeDefinition
	return p
}

func (*PartialObjectTypeDefinitionContext) IsPartialObjectTypeDefinitionContext() {}

func NewPartialObjectTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialObjectTypeDefinitionContext {
	var p = new(PartialObjectTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialObjectTypeDefinition

	return p
}

func (s *PartialObjectTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialObjectTypeDefinitionContext) TYPE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserTYPE, 0)
}

func (s *PartialObjectTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialObjectTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialObjectTypeDefinitionContext) ImplementsInterfaces() IImplementsInterfacesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImplementsInterfacesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImplementsInterfacesContext)
}

func (s *PartialObjectTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialObjectTypeDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *PartialObjectTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialObjectTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialObjectTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialObjectTypeDefinition(s)
	}
}

func (s *PartialObjectTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialObjectTypeDefinition(s)
	}
}

func (s *PartialObjectTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialObjectTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialObjectTypeDefinition() (localctx IPartialObjectTypeDefinitionContext) {
	localctx = NewPartialObjectTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, GraphqlParserRULE_partialObjectTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(681)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(680)
				p.Description()
			}

		}
		{
			p.SetState(683)
			p.Match(GraphqlParserTYPE)
		}
		{
			p.SetState(684)
			p.Name()
		}
		p.SetState(686)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserIMPLEMENTS {
			{
				p.SetState(685)
				p.implementsInterfaces(0)
			}

		}
		p.SetState(689)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(688)
				p.Directives()
			}

		}
		p.SetState(692)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__2 {
			{
				p.SetState(691)
				p.FieldsDefinition()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(694)
				p.Description()
			}

		}
		{
			p.SetState(697)
			p.Name()
		}
		p.SetState(699)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserIMPLEMENTS {
			{
				p.SetState(698)
				p.implementsInterfaces(0)
			}

		}
		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(701)
				p.Directives()
			}

		}
		p.SetState(705)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__2 {
			{
				p.SetState(704)
				p.FieldsDefinition()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(708)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(707)
				p.Description()
			}

		}
		p.SetState(711)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserIMPLEMENTS {
			{
				p.SetState(710)
				p.implementsInterfaces(0)
			}

		}
		p.SetState(714)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(713)
				p.Directives()
			}

		}
		p.SetState(717)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__2 {
			{
				p.SetState(716)
				p.FieldsDefinition()
			}

		}

	}

	return localctx
}

// IPartialInputObjectTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialInputObjectTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialInputObjectTypeDefinitionContext differentiates from other interfaces.
	IsPartialInputObjectTypeDefinitionContext()
}

type PartialInputObjectTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialInputObjectTypeDefinitionContext() *PartialInputObjectTypeDefinitionContext {
	var p = new(PartialInputObjectTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialInputObjectTypeDefinition
	return p
}

func (*PartialInputObjectTypeDefinitionContext) IsPartialInputObjectTypeDefinitionContext() {}

func NewPartialInputObjectTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialInputObjectTypeDefinitionContext {
	var p = new(PartialInputObjectTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialInputObjectTypeDefinition

	return p
}

func (s *PartialInputObjectTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialInputObjectTypeDefinitionContext) INPUT() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINPUT, 0)
}

func (s *PartialInputObjectTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialInputObjectTypeDefinitionContext) InputObjectValueDefinitions() IInputObjectValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInputObjectValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInputObjectValueDefinitionsContext)
}

func (s *PartialInputObjectTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialInputObjectTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialInputObjectTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialInputObjectTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialInputObjectTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialInputObjectTypeDefinition(s)
	}
}

func (s *PartialInputObjectTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialInputObjectTypeDefinition(s)
	}
}

func (s *PartialInputObjectTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialInputObjectTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialInputObjectTypeDefinition() (localctx IPartialInputObjectTypeDefinitionContext) {
	localctx = NewPartialInputObjectTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, GraphqlParserRULE_partialInputObjectTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 112, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(721)
				p.Description()
			}

		}
		{
			p.SetState(724)
			p.Match(GraphqlParserINPUT)
		}
		{
			p.SetState(725)
			p.Name()
		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(726)
				p.Directives()
			}

		}
		{
			p.SetState(729)
			p.InputObjectValueDefinitions()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(732)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(731)
				p.Description()
			}

		}
		{
			p.SetState(734)
			p.Name()
		}
		p.SetState(736)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(735)
				p.Directives()
			}

		}
		{
			p.SetState(738)
			p.InputObjectValueDefinitions()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(741)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(740)
				p.Description()
			}

		}
		p.SetState(744)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(743)
				p.Directives()
			}

		}
		{
			p.SetState(746)
			p.InputObjectValueDefinitions()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(748)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(747)
				p.Description()
			}

		}
		p.SetState(751)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(750)
				p.Directives()
			}

		}

	}

	return localctx
}

// IPartialInputValueDefinitionContext is an interface to support dynamic dispatch.
type IPartialInputValueDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialInputValueDefinitionContext differentiates from other interfaces.
	IsPartialInputValueDefinitionContext()
}

type PartialInputValueDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialInputValueDefinitionContext() *PartialInputValueDefinitionContext {
	var p = new(PartialInputValueDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialInputValueDefinition
	return p
}

func (*PartialInputValueDefinitionContext) IsPartialInputValueDefinitionContext() {}

func NewPartialInputValueDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialInputValueDefinitionContext {
	var p = new(PartialInputValueDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialInputValueDefinition

	return p
}

func (s *PartialInputValueDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialInputValueDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialInputValueDefinitionContext) GqlType() IGqlTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGqlTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGqlTypeContext)
}

func (s *PartialInputValueDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialInputValueDefinitionContext) DefaultValue() IDefaultValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDefaultValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDefaultValueContext)
}

func (s *PartialInputValueDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialInputValueDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialInputValueDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialInputValueDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialInputValueDefinition(s)
	}
}

func (s *PartialInputValueDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialInputValueDefinition(s)
	}
}

func (s *PartialInputValueDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialInputValueDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialInputValueDefinition() (localctx IPartialInputValueDefinitionContext) {
	localctx = NewPartialInputValueDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, GraphqlParserRULE_partialInputValueDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(788)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(756)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(755)
				p.Description()
			}

		}
		{
			p.SetState(758)
			p.Name()
		}
		{
			p.SetState(759)
			p.Match(GraphqlParserT__4)
		}
		{
			p.SetState(760)
			p.GqlType()
		}
		p.SetState(762)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(761)
				p.DefaultValue()
			}

		}
		p.SetState(765)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(764)
				p.Directives()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(768)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(767)
				p.Description()
			}

		}
		{
			p.SetState(770)
			p.Name()
		}
		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(771)
				p.DefaultValue()
			}

		}
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(774)
				p.Directives()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(777)
				p.Description()
			}

		}
		{
			p.SetState(780)
			p.Match(GraphqlParserT__4)
		}
		{
			p.SetState(781)
			p.GqlType()
		}
		p.SetState(783)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(782)
				p.DefaultValue()
			}

		}
		p.SetState(786)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(785)
				p.Directives()
			}

		}

	}

	return localctx
}

// IPartialEnumTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialEnumTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialEnumTypeDefinitionContext differentiates from other interfaces.
	IsPartialEnumTypeDefinitionContext()
}

type PartialEnumTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialEnumTypeDefinitionContext() *PartialEnumTypeDefinitionContext {
	var p = new(PartialEnumTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialEnumTypeDefinition
	return p
}

func (*PartialEnumTypeDefinitionContext) IsPartialEnumTypeDefinitionContext() {}

func NewPartialEnumTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialEnumTypeDefinitionContext {
	var p = new(PartialEnumTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialEnumTypeDefinition

	return p
}

func (s *PartialEnumTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialEnumTypeDefinitionContext) ENUM() antlr.TerminalNode {
	return s.GetToken(GraphqlParserENUM, 0)
}

func (s *PartialEnumTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialEnumTypeDefinitionContext) EnumValueDefinitions() IEnumValueDefinitionsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueDefinitionsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumValueDefinitionsContext)
}

func (s *PartialEnumTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialEnumTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialEnumTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialEnumTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialEnumTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialEnumTypeDefinition(s)
	}
}

func (s *PartialEnumTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialEnumTypeDefinition(s)
	}
}

func (s *PartialEnumTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialEnumTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialEnumTypeDefinition() (localctx IPartialEnumTypeDefinitionContext) {
	localctx = NewPartialEnumTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, GraphqlParserRULE_partialEnumTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(816)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 129, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(790)
				p.Description()
			}

		}
		{
			p.SetState(793)
			p.Match(GraphqlParserENUM)
		}
		{
			p.SetState(794)
			p.Name()
		}
		p.SetState(796)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(795)
				p.Directives()
			}

		}
		{
			p.SetState(798)
			p.EnumValueDefinitions()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(801)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(800)
				p.Description()
			}

		}
		{
			p.SetState(803)
			p.Name()
		}
		p.SetState(805)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(804)
				p.Directives()
			}

		}
		{
			p.SetState(807)
			p.EnumValueDefinitions()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(810)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(809)
				p.Description()
			}

		}
		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(812)
				p.Directives()
			}

		}
		{
			p.SetState(815)
			p.EnumValueDefinitions()
		}

	}

	return localctx
}

// IPartialInterfaceTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialInterfaceTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialInterfaceTypeDefinitionContext differentiates from other interfaces.
	IsPartialInterfaceTypeDefinitionContext()
}

type PartialInterfaceTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialInterfaceTypeDefinitionContext() *PartialInterfaceTypeDefinitionContext {
	var p = new(PartialInterfaceTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialInterfaceTypeDefinition
	return p
}

func (*PartialInterfaceTypeDefinitionContext) IsPartialInterfaceTypeDefinitionContext() {}

func NewPartialInterfaceTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialInterfaceTypeDefinitionContext {
	var p = new(PartialInterfaceTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialInterfaceTypeDefinition

	return p
}

func (s *PartialInterfaceTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialInterfaceTypeDefinitionContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(GraphqlParserINTERFACE, 0)
}

func (s *PartialInterfaceTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialInterfaceTypeDefinitionContext) FieldsDefinition() IFieldsDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldsDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFieldsDefinitionContext)
}

func (s *PartialInterfaceTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialInterfaceTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialInterfaceTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialInterfaceTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialInterfaceTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialInterfaceTypeDefinition(s)
	}
}

func (s *PartialInterfaceTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialInterfaceTypeDefinition(s)
	}
}

func (s *PartialInterfaceTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialInterfaceTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialInterfaceTypeDefinition() (localctx IPartialInterfaceTypeDefinitionContext) {
	localctx = NewPartialInterfaceTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, GraphqlParserRULE_partialInterfaceTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(844)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 136, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(818)
				p.Description()
			}

		}
		{
			p.SetState(821)
			p.Match(GraphqlParserINTERFACE)
		}
		{
			p.SetState(822)
			p.Name()
		}
		p.SetState(824)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(823)
				p.Directives()
			}

		}
		{
			p.SetState(826)
			p.FieldsDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(829)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(828)
				p.Description()
			}

		}
		{
			p.SetState(831)
			p.Name()
		}
		p.SetState(833)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(832)
				p.Directives()
			}

		}
		{
			p.SetState(835)
			p.FieldsDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(837)
				p.Description()
			}

		}
		p.SetState(841)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(840)
				p.Directives()
			}

		}
		{
			p.SetState(843)
			p.FieldsDefinition()
		}

	}

	return localctx
}

// IPartialUnionTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialUnionTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialUnionTypeDefinitionContext differentiates from other interfaces.
	IsPartialUnionTypeDefinitionContext()
}

type PartialUnionTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialUnionTypeDefinitionContext() *PartialUnionTypeDefinitionContext {
	var p = new(PartialUnionTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialUnionTypeDefinition
	return p
}

func (*PartialUnionTypeDefinitionContext) IsPartialUnionTypeDefinitionContext() {}

func NewPartialUnionTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialUnionTypeDefinitionContext {
	var p = new(PartialUnionTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialUnionTypeDefinition

	return p
}

func (s *PartialUnionTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialUnionTypeDefinitionContext) UNION() antlr.TerminalNode {
	return s.GetToken(GraphqlParserUNION, 0)
}

func (s *PartialUnionTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialUnionTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialUnionTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialUnionTypeDefinitionContext) UnionMembership() IUnionMembershipContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnionMembershipContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnionMembershipContext)
}

func (s *PartialUnionTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialUnionTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialUnionTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialUnionTypeDefinition(s)
	}
}

func (s *PartialUnionTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialUnionTypeDefinition(s)
	}
}

func (s *PartialUnionTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialUnionTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialUnionTypeDefinition() (localctx IPartialUnionTypeDefinitionContext) {
	localctx = NewPartialUnionTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, GraphqlParserRULE_partialUnionTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(876)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(847)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(846)
				p.Description()
			}

		}
		{
			p.SetState(849)
			p.Match(GraphqlParserUNION)
		}
		{
			p.SetState(850)
			p.Name()
		}
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(851)
				p.Directives()
			}

		}
		p.SetState(855)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(854)
				p.UnionMembership()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(858)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(857)
				p.Description()
			}

		}
		{
			p.SetState(860)
			p.Name()
		}
		p.SetState(862)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(861)
				p.Directives()
			}

		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(864)
				p.UnionMembership()
			}

		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(868)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
			{
				p.SetState(867)
				p.Description()
			}

		}
		p.SetState(871)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__5 {
			{
				p.SetState(870)
				p.Directives()
			}

		}
		p.SetState(874)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == GraphqlParserT__9 {
			{
				p.SetState(873)
				p.UnionMembership()
			}

		}

	}

	return localctx
}

// IPartialScalarTypeDefinitionContext is an interface to support dynamic dispatch.
type IPartialScalarTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPartialScalarTypeDefinitionContext differentiates from other interfaces.
	IsPartialScalarTypeDefinitionContext()
}

type PartialScalarTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPartialScalarTypeDefinitionContext() *PartialScalarTypeDefinitionContext {
	var p = new(PartialScalarTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = GraphqlParserRULE_partialScalarTypeDefinition
	return p
}

func (*PartialScalarTypeDefinitionContext) IsPartialScalarTypeDefinitionContext() {}

func NewPartialScalarTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PartialScalarTypeDefinitionContext {
	var p = new(PartialScalarTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = GraphqlParserRULE_partialScalarTypeDefinition

	return p
}

func (s *PartialScalarTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *PartialScalarTypeDefinitionContext) Description() IDescriptionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDescriptionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDescriptionContext)
}

func (s *PartialScalarTypeDefinitionContext) Name() INameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameContext)
}

func (s *PartialScalarTypeDefinitionContext) Directives() IDirectivesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDirectivesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDirectivesContext)
}

func (s *PartialScalarTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PartialScalarTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PartialScalarTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.EnterPartialScalarTypeDefinition(s)
	}
}

func (s *PartialScalarTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(GraphqlListener); ok {
		listenerT.ExitPartialScalarTypeDefinition(s)
	}
}

func (s *PartialScalarTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case GraphqlVisitor:
		return t.VisitPartialScalarTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *GraphqlParser) PartialScalarTypeDefinition() (localctx IPartialScalarTypeDefinitionContext) {
	localctx = NewPartialScalarTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, GraphqlParserRULE_partialScalarTypeDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(879)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserStringValue || _la == GraphqlParserTripleQuotedStringValue {
		{
			p.SetState(878)
			p.Description()
		}

	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-18)&-(0x1f+1)) == 0 && ((1<<uint((_la-18)))&((1<<(GraphqlParserFRAGMENT-18))|(1<<(GraphqlParserQUERY-18))|(1<<(GraphqlParserMUTATION-18))|(1<<(GraphqlParserSUBSCRIPTION-18))|(1<<(GraphqlParserSCHEMA-18))|(1<<(GraphqlParserSCALAR-18))|(1<<(GraphqlParserTYPE-18))|(1<<(GraphqlParserINTERFACE-18))|(1<<(GraphqlParserIMPLEMENTS-18))|(1<<(GraphqlParserENUM-18))|(1<<(GraphqlParserUNION-18))|(1<<(GraphqlParserINPUT-18))|(1<<(GraphqlParserEXTEND-18))|(1<<(GraphqlParserDIRECTIVE-18))|(1<<(GraphqlParserNAME-18)))) != 0 {
		{
			p.SetState(881)
			p.Name()
		}

	}
	p.SetState(885)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == GraphqlParserT__5 {
		{
			p.SetState(884)
			p.Directives()
		}

	}

	return localctx
}

func (p *GraphqlParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 45:
		var t *ImplementsInterfacesContext = nil
		if localctx != nil {
			t = localctx.(*ImplementsInterfacesContext)
		}
		return p.ImplementsInterfaces_Sempred(t, predIndex)

	case 55:
		var t *UnionMembersContext = nil
		if localctx != nil {
			t = localctx.(*UnionMembersContext)
		}
		return p.UnionMembers_Sempred(t, predIndex)

	case 65:
		var t *DirectiveLocationsContext = nil
		if localctx != nil {
			t = localctx.(*DirectiveLocationsContext)
		}
		return p.DirectiveLocations_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *GraphqlParser) ImplementsInterfaces_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GraphqlParser) UnionMembers_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GraphqlParser) DirectiveLocations_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
