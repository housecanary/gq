// Code generated from /Users/mpoindexter/dev/gq/grammar/Graphql.g4 by ANTLR 4.10.1. DO NOT EDIT.

package gen

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

func isDigit(c int) bool {
	return c >= '0' && c <= '9'
}
func isNameStart(c int) bool {
	return '_' == c ||
		(c >= 'A' && c <= 'Z') ||
		(c >= 'a' && c <= 'z')
}
func isDot(c int) bool {
	return '.' == c
}

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type GraphqlLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var graphqllexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func graphqllexerLexerInit() {
	staticData := &graphqllexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "'['", "']'", "'{'", "'}'", "':'", "'@'", "'('", "')'", "'$'", "'='",
		"'!'", "'...'", "'&'", "'|'", "", "'null'", "'fragment'", "'query'",
		"'mutation'", "'subscription'", "'schema'", "'scalar'", "'type'", "'interface'",
		"'implements'", "'enum'", "'union'", "'input'", "'extend'", "'directive'",
		"'on'", "'repeatable'",
	}
	staticData.symbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "BooleanValue",
		"NullValue", "FRAGMENT", "QUERY", "MUTATION", "SUBSCRIPTION", "SCHEMA",
		"SCALAR", "TYPE", "INTERFACE", "IMPLEMENTS", "ENUM", "UNION", "INPUT",
		"EXTEND", "DIRECTIVE", "ON_KEYWORD", "REPEATABLE", "NAME", "IntValue",
		"FloatValue", "StringValue", "Ignored",
	}
	staticData.ruleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "BooleanValue", "NullValue",
		"FRAGMENT", "QUERY", "MUTATION", "SUBSCRIPTION", "SCHEMA", "SCALAR",
		"TYPE", "INTERFACE", "IMPLEMENTS", "ENUM", "UNION", "INPUT", "EXTEND",
		"DIRECTIVE", "ON_KEYWORD", "REPEATABLE", "NAME", "IntValue", "IntegerPart",
		"NegativeSign", "NonZeroDigit", "FloatValue", "FractionalPart", "ExponentPart",
		"ExponentIndicator", "Sign", "Digit", "StringValue", "BlockStringCharacter",
		"StringCharacter", "EscapedCharacter", "EscapedUnicode", "Hex", "SourceCharacter",
		"Ignored", "UnicodeBOM", "WhiteSpace", "LineTerminator", "CommentChar",
		"Comment", "Comma",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 37, 438, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2,
		52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 1, 0,
		1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14,
		1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 155, 8, 14, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19,
		1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21,
		1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1,
		29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1,
		31, 1, 32, 1, 32, 5, 32, 289, 8, 32, 10, 32, 12, 32, 292, 9, 32, 1, 33,
		1, 33, 1, 33, 1, 34, 3, 34, 298, 8, 34, 1, 34, 1, 34, 3, 34, 302, 8, 34,
		1, 34, 1, 34, 5, 34, 306, 8, 34, 10, 34, 12, 34, 309, 9, 34, 3, 34, 311,
		8, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1,
		37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37,
		3, 37, 333, 8, 37, 1, 38, 1, 38, 4, 38, 337, 8, 38, 11, 38, 12, 38, 338,
		1, 39, 1, 39, 3, 39, 343, 8, 39, 1, 39, 4, 39, 346, 8, 39, 11, 39, 12,
		39, 347, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43,
		1, 43, 1, 43, 1, 43, 4, 43, 362, 8, 43, 11, 43, 12, 43, 363, 1, 43, 1,
		43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 373, 8, 43, 10, 43, 12, 43,
		376, 9, 43, 1, 43, 1, 43, 1, 43, 3, 43, 381, 8, 43, 1, 44, 1, 44, 1, 44,
		1, 44, 1, 44, 3, 44, 388, 8, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1,
		45, 1, 45, 3, 45, 397, 8, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47,
		1, 47, 1, 48, 1, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 3,
		50, 415, 8, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 52, 1, 52, 1, 53, 1, 53,
		1, 53, 3, 53, 426, 8, 53, 1, 54, 1, 54, 1, 55, 1, 55, 5, 55, 432, 8, 55,
		10, 55, 12, 55, 435, 9, 55, 1, 56, 1, 56, 1, 374, 0, 57, 1, 1, 3, 2, 5,
		3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25,
		13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43,
		22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61,
		31, 63, 32, 65, 33, 67, 34, 69, 0, 71, 0, 73, 0, 75, 35, 77, 0, 79, 0,
		81, 0, 83, 0, 85, 0, 87, 36, 89, 0, 91, 0, 93, 0, 95, 0, 97, 0, 99, 0,
		101, 37, 103, 0, 105, 0, 107, 0, 109, 0, 111, 0, 113, 0, 1, 0, 12, 3, 0,
		65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 2, 0, 69,
		69, 101, 101, 2, 0, 43, 43, 45, 45, 4, 0, 9, 9, 32, 33, 35, 91, 93, 65535,
		8, 0, 34, 34, 47, 47, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116,
		116, 3, 0, 48, 57, 65, 70, 97, 102, 3, 0, 9, 10, 13, 13, 32, 65535, 1,
		0, 65279, 65279, 2, 0, 9, 9, 32, 32, 2, 0, 10, 10, 13, 13, 2, 0, 9, 9,
		32, 65535, 441, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0,
		7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0,
		0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0,
		0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0,
		0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1,
		0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45,
		1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0,
		53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0,
		0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0,
		0, 0, 75, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 1, 115, 1,
		0, 0, 0, 3, 117, 1, 0, 0, 0, 5, 119, 1, 0, 0, 0, 7, 121, 1, 0, 0, 0, 9,
		123, 1, 0, 0, 0, 11, 125, 1, 0, 0, 0, 13, 127, 1, 0, 0, 0, 15, 129, 1,
		0, 0, 0, 17, 131, 1, 0, 0, 0, 19, 133, 1, 0, 0, 0, 21, 135, 1, 0, 0, 0,
		23, 137, 1, 0, 0, 0, 25, 141, 1, 0, 0, 0, 27, 143, 1, 0, 0, 0, 29, 154,
		1, 0, 0, 0, 31, 156, 1, 0, 0, 0, 33, 161, 1, 0, 0, 0, 35, 170, 1, 0, 0,
		0, 37, 176, 1, 0, 0, 0, 39, 185, 1, 0, 0, 0, 41, 198, 1, 0, 0, 0, 43, 205,
		1, 0, 0, 0, 45, 212, 1, 0, 0, 0, 47, 217, 1, 0, 0, 0, 49, 227, 1, 0, 0,
		0, 51, 238, 1, 0, 0, 0, 53, 243, 1, 0, 0, 0, 55, 249, 1, 0, 0, 0, 57, 255,
		1, 0, 0, 0, 59, 262, 1, 0, 0, 0, 61, 272, 1, 0, 0, 0, 63, 275, 1, 0, 0,
		0, 65, 286, 1, 0, 0, 0, 67, 293, 1, 0, 0, 0, 69, 310, 1, 0, 0, 0, 71, 312,
		1, 0, 0, 0, 73, 314, 1, 0, 0, 0, 75, 332, 1, 0, 0, 0, 77, 334, 1, 0, 0,
		0, 79, 340, 1, 0, 0, 0, 81, 349, 1, 0, 0, 0, 83, 351, 1, 0, 0, 0, 85, 353,
		1, 0, 0, 0, 87, 380, 1, 0, 0, 0, 89, 387, 1, 0, 0, 0, 91, 396, 1, 0, 0,
		0, 93, 398, 1, 0, 0, 0, 95, 400, 1, 0, 0, 0, 97, 405, 1, 0, 0, 0, 99, 407,
		1, 0, 0, 0, 101, 414, 1, 0, 0, 0, 103, 418, 1, 0, 0, 0, 105, 420, 1, 0,
		0, 0, 107, 425, 1, 0, 0, 0, 109, 427, 1, 0, 0, 0, 111, 429, 1, 0, 0, 0,
		113, 436, 1, 0, 0, 0, 115, 116, 5, 91, 0, 0, 116, 2, 1, 0, 0, 0, 117, 118,
		5, 93, 0, 0, 118, 4, 1, 0, 0, 0, 119, 120, 5, 123, 0, 0, 120, 6, 1, 0,
		0, 0, 121, 122, 5, 125, 0, 0, 122, 8, 1, 0, 0, 0, 123, 124, 5, 58, 0, 0,
		124, 10, 1, 0, 0, 0, 125, 126, 5, 64, 0, 0, 126, 12, 1, 0, 0, 0, 127, 128,
		5, 40, 0, 0, 128, 14, 1, 0, 0, 0, 129, 130, 5, 41, 0, 0, 130, 16, 1, 0,
		0, 0, 131, 132, 5, 36, 0, 0, 132, 18, 1, 0, 0, 0, 133, 134, 5, 61, 0, 0,
		134, 20, 1, 0, 0, 0, 135, 136, 5, 33, 0, 0, 136, 22, 1, 0, 0, 0, 137, 138,
		5, 46, 0, 0, 138, 139, 5, 46, 0, 0, 139, 140, 5, 46, 0, 0, 140, 24, 1,
		0, 0, 0, 141, 142, 5, 38, 0, 0, 142, 26, 1, 0, 0, 0, 143, 144, 5, 124,
		0, 0, 144, 28, 1, 0, 0, 0, 145, 146, 5, 116, 0, 0, 146, 147, 5, 114, 0,
		0, 147, 148, 5, 117, 0, 0, 148, 155, 5, 101, 0, 0, 149, 150, 5, 102, 0,
		0, 150, 151, 5, 97, 0, 0, 151, 152, 5, 108, 0, 0, 152, 153, 5, 115, 0,
		0, 153, 155, 5, 101, 0, 0, 154, 145, 1, 0, 0, 0, 154, 149, 1, 0, 0, 0,
		155, 30, 1, 0, 0, 0, 156, 157, 5, 110, 0, 0, 157, 158, 5, 117, 0, 0, 158,
		159, 5, 108, 0, 0, 159, 160, 5, 108, 0, 0, 160, 32, 1, 0, 0, 0, 161, 162,
		5, 102, 0, 0, 162, 163, 5, 114, 0, 0, 163, 164, 5, 97, 0, 0, 164, 165,
		5, 103, 0, 0, 165, 166, 5, 109, 0, 0, 166, 167, 5, 101, 0, 0, 167, 168,
		5, 110, 0, 0, 168, 169, 5, 116, 0, 0, 169, 34, 1, 0, 0, 0, 170, 171, 5,
		113, 0, 0, 171, 172, 5, 117, 0, 0, 172, 173, 5, 101, 0, 0, 173, 174, 5,
		114, 0, 0, 174, 175, 5, 121, 0, 0, 175, 36, 1, 0, 0, 0, 176, 177, 5, 109,
		0, 0, 177, 178, 5, 117, 0, 0, 178, 179, 5, 116, 0, 0, 179, 180, 5, 97,
		0, 0, 180, 181, 5, 116, 0, 0, 181, 182, 5, 105, 0, 0, 182, 183, 5, 111,
		0, 0, 183, 184, 5, 110, 0, 0, 184, 38, 1, 0, 0, 0, 185, 186, 5, 115, 0,
		0, 186, 187, 5, 117, 0, 0, 187, 188, 5, 98, 0, 0, 188, 189, 5, 115, 0,
		0, 189, 190, 5, 99, 0, 0, 190, 191, 5, 114, 0, 0, 191, 192, 5, 105, 0,
		0, 192, 193, 5, 112, 0, 0, 193, 194, 5, 116, 0, 0, 194, 195, 5, 105, 0,
		0, 195, 196, 5, 111, 0, 0, 196, 197, 5, 110, 0, 0, 197, 40, 1, 0, 0, 0,
		198, 199, 5, 115, 0, 0, 199, 200, 5, 99, 0, 0, 200, 201, 5, 104, 0, 0,
		201, 202, 5, 101, 0, 0, 202, 203, 5, 109, 0, 0, 203, 204, 5, 97, 0, 0,
		204, 42, 1, 0, 0, 0, 205, 206, 5, 115, 0, 0, 206, 207, 5, 99, 0, 0, 207,
		208, 5, 97, 0, 0, 208, 209, 5, 108, 0, 0, 209, 210, 5, 97, 0, 0, 210, 211,
		5, 114, 0, 0, 211, 44, 1, 0, 0, 0, 212, 213, 5, 116, 0, 0, 213, 214, 5,
		121, 0, 0, 214, 215, 5, 112, 0, 0, 215, 216, 5, 101, 0, 0, 216, 46, 1,
		0, 0, 0, 217, 218, 5, 105, 0, 0, 218, 219, 5, 110, 0, 0, 219, 220, 5, 116,
		0, 0, 220, 221, 5, 101, 0, 0, 221, 222, 5, 114, 0, 0, 222, 223, 5, 102,
		0, 0, 223, 224, 5, 97, 0, 0, 224, 225, 5, 99, 0, 0, 225, 226, 5, 101, 0,
		0, 226, 48, 1, 0, 0, 0, 227, 228, 5, 105, 0, 0, 228, 229, 5, 109, 0, 0,
		229, 230, 5, 112, 0, 0, 230, 231, 5, 108, 0, 0, 231, 232, 5, 101, 0, 0,
		232, 233, 5, 109, 0, 0, 233, 234, 5, 101, 0, 0, 234, 235, 5, 110, 0, 0,
		235, 236, 5, 116, 0, 0, 236, 237, 5, 115, 0, 0, 237, 50, 1, 0, 0, 0, 238,
		239, 5, 101, 0, 0, 239, 240, 5, 110, 0, 0, 240, 241, 5, 117, 0, 0, 241,
		242, 5, 109, 0, 0, 242, 52, 1, 0, 0, 0, 243, 244, 5, 117, 0, 0, 244, 245,
		5, 110, 0, 0, 245, 246, 5, 105, 0, 0, 246, 247, 5, 111, 0, 0, 247, 248,
		5, 110, 0, 0, 248, 54, 1, 0, 0, 0, 249, 250, 5, 105, 0, 0, 250, 251, 5,
		110, 0, 0, 251, 252, 5, 112, 0, 0, 252, 253, 5, 117, 0, 0, 253, 254, 5,
		116, 0, 0, 254, 56, 1, 0, 0, 0, 255, 256, 5, 101, 0, 0, 256, 257, 5, 120,
		0, 0, 257, 258, 5, 116, 0, 0, 258, 259, 5, 101, 0, 0, 259, 260, 5, 110,
		0, 0, 260, 261, 5, 100, 0, 0, 261, 58, 1, 0, 0, 0, 262, 263, 5, 100, 0,
		0, 263, 264, 5, 105, 0, 0, 264, 265, 5, 114, 0, 0, 265, 266, 5, 101, 0,
		0, 266, 267, 5, 99, 0, 0, 267, 268, 5, 116, 0, 0, 268, 269, 5, 105, 0,
		0, 269, 270, 5, 118, 0, 0, 270, 271, 5, 101, 0, 0, 271, 60, 1, 0, 0, 0,
		272, 273, 5, 111, 0, 0, 273, 274, 5, 110, 0, 0, 274, 62, 1, 0, 0, 0, 275,
		276, 5, 114, 0, 0, 276, 277, 5, 101, 0, 0, 277, 278, 5, 112, 0, 0, 278,
		279, 5, 101, 0, 0, 279, 280, 5, 97, 0, 0, 280, 281, 5, 116, 0, 0, 281,
		282, 5, 97, 0, 0, 282, 283, 5, 98, 0, 0, 283, 284, 5, 108, 0, 0, 284, 285,
		5, 101, 0, 0, 285, 64, 1, 0, 0, 0, 286, 290, 7, 0, 0, 0, 287, 289, 7, 1,
		0, 0, 288, 287, 1, 0, 0, 0, 289, 292, 1, 0, 0, 0, 290, 288, 1, 0, 0, 0,
		290, 291, 1, 0, 0, 0, 291, 66, 1, 0, 0, 0, 292, 290, 1, 0, 0, 0, 293, 294,
		3, 69, 34, 0, 294, 295, 4, 33, 0, 0, 295, 68, 1, 0, 0, 0, 296, 298, 3,
		71, 35, 0, 297, 296, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 299, 1, 0,
		0, 0, 299, 311, 5, 48, 0, 0, 300, 302, 3, 71, 35, 0, 301, 300, 1, 0, 0,
		0, 301, 302, 1, 0, 0, 0, 302, 303, 1, 0, 0, 0, 303, 307, 3, 73, 36, 0,
		304, 306, 3, 85, 42, 0, 305, 304, 1, 0, 0, 0, 306, 309, 1, 0, 0, 0, 307,
		305, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308, 311, 1, 0, 0, 0, 309, 307,
		1, 0, 0, 0, 310, 297, 1, 0, 0, 0, 310, 301, 1, 0, 0, 0, 311, 70, 1, 0,
		0, 0, 312, 313, 5, 45, 0, 0, 313, 72, 1, 0, 0, 0, 314, 315, 2, 49, 57,
		0, 315, 74, 1, 0, 0, 0, 316, 317, 3, 69, 34, 0, 317, 318, 3, 77, 38, 0,
		318, 319, 3, 79, 39, 0, 319, 320, 1, 0, 0, 0, 320, 321, 4, 37, 1, 0, 321,
		333, 1, 0, 0, 0, 322, 323, 3, 69, 34, 0, 323, 324, 3, 77, 38, 0, 324, 325,
		1, 0, 0, 0, 325, 326, 4, 37, 2, 0, 326, 333, 1, 0, 0, 0, 327, 328, 3, 69,
		34, 0, 328, 329, 3, 79, 39, 0, 329, 330, 1, 0, 0, 0, 330, 331, 4, 37, 3,
		0, 331, 333, 1, 0, 0, 0, 332, 316, 1, 0, 0, 0, 332, 322, 1, 0, 0, 0, 332,
		327, 1, 0, 0, 0, 333, 76, 1, 0, 0, 0, 334, 336, 5, 46, 0, 0, 335, 337,
		3, 85, 42, 0, 336, 335, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 336, 1,
		0, 0, 0, 338, 339, 1, 0, 0, 0, 339, 78, 1, 0, 0, 0, 340, 342, 3, 81, 40,
		0, 341, 343, 3, 83, 41, 0, 342, 341, 1, 0, 0, 0, 342, 343, 1, 0, 0, 0,
		343, 345, 1, 0, 0, 0, 344, 346, 3, 85, 42, 0, 345, 344, 1, 0, 0, 0, 346,
		347, 1, 0, 0, 0, 347, 345, 1, 0, 0, 0, 347, 348, 1, 0, 0, 0, 348, 80, 1,
		0, 0, 0, 349, 350, 7, 2, 0, 0, 350, 82, 1, 0, 0, 0, 351, 352, 7, 3, 0,
		0, 352, 84, 1, 0, 0, 0, 353, 354, 2, 48, 57, 0, 354, 86, 1, 0, 0, 0, 355,
		356, 5, 34, 0, 0, 356, 357, 5, 34, 0, 0, 357, 358, 1, 0, 0, 0, 358, 381,
		4, 43, 4, 0, 359, 361, 5, 34, 0, 0, 360, 362, 3, 91, 45, 0, 361, 360, 1,
		0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0,
		0, 364, 365, 1, 0, 0, 0, 365, 366, 5, 34, 0, 0, 366, 381, 1, 0, 0, 0, 367,
		368, 5, 34, 0, 0, 368, 369, 5, 34, 0, 0, 369, 370, 5, 34, 0, 0, 370, 374,
		1, 0, 0, 0, 371, 373, 3, 89, 44, 0, 372, 371, 1, 0, 0, 0, 373, 376, 1,
		0, 0, 0, 374, 375, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 377, 1, 0, 0,
		0, 376, 374, 1, 0, 0, 0, 377, 378, 5, 34, 0, 0, 378, 379, 5, 34, 0, 0,
		379, 381, 5, 34, 0, 0, 380, 355, 1, 0, 0, 0, 380, 359, 1, 0, 0, 0, 380,
		367, 1, 0, 0, 0, 381, 88, 1, 0, 0, 0, 382, 383, 5, 92, 0, 0, 383, 384,
		5, 34, 0, 0, 384, 385, 5, 34, 0, 0, 385, 388, 5, 34, 0, 0, 386, 388, 3,
		99, 49, 0, 387, 382, 1, 0, 0, 0, 387, 386, 1, 0, 0, 0, 388, 90, 1, 0, 0,
		0, 389, 397, 7, 4, 0, 0, 390, 391, 5, 92, 0, 0, 391, 392, 5, 117, 0, 0,
		392, 393, 1, 0, 0, 0, 393, 397, 3, 95, 47, 0, 394, 395, 5, 92, 0, 0, 395,
		397, 3, 93, 46, 0, 396, 389, 1, 0, 0, 0, 396, 390, 1, 0, 0, 0, 396, 394,
		1, 0, 0, 0, 397, 92, 1, 0, 0, 0, 398, 399, 7, 5, 0, 0, 399, 94, 1, 0, 0,
		0, 400, 401, 3, 97, 48, 0, 401, 402, 3, 97, 48, 0, 402, 403, 3, 97, 48,
		0, 403, 404, 3, 97, 48, 0, 404, 96, 1, 0, 0, 0, 405, 406, 7, 6, 0, 0, 406,
		98, 1, 0, 0, 0, 407, 408, 7, 7, 0, 0, 408, 100, 1, 0, 0, 0, 409, 415, 3,
		103, 51, 0, 410, 415, 3, 105, 52, 0, 411, 415, 3, 107, 53, 0, 412, 415,
		3, 111, 55, 0, 413, 415, 3, 113, 56, 0, 414, 409, 1, 0, 0, 0, 414, 410,
		1, 0, 0, 0, 414, 411, 1, 0, 0, 0, 414, 412, 1, 0, 0, 0, 414, 413, 1, 0,
		0, 0, 415, 416, 1, 0, 0, 0, 416, 417, 6, 50, 0, 0, 417, 102, 1, 0, 0, 0,
		418, 419, 7, 8, 0, 0, 419, 104, 1, 0, 0, 0, 420, 421, 7, 9, 0, 0, 421,
		106, 1, 0, 0, 0, 422, 423, 5, 13, 0, 0, 423, 426, 5, 10, 0, 0, 424, 426,
		7, 10, 0, 0, 425, 422, 1, 0, 0, 0, 425, 424, 1, 0, 0, 0, 426, 108, 1, 0,
		0, 0, 427, 428, 7, 11, 0, 0, 428, 110, 1, 0, 0, 0, 429, 433, 5, 35, 0,
		0, 430, 432, 3, 109, 54, 0, 431, 430, 1, 0, 0, 0, 432, 435, 1, 0, 0, 0,
		433, 431, 1, 0, 0, 0, 433, 434, 1, 0, 0, 0, 434, 112, 1, 0, 0, 0, 435,
		433, 1, 0, 0, 0, 436, 437, 5, 44, 0, 0, 437, 114, 1, 0, 0, 0, 19, 0, 154,
		290, 297, 301, 307, 310, 332, 338, 342, 347, 363, 374, 380, 387, 396, 414,
		425, 433, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// GraphqlLexerInit initializes any static state used to implement GraphqlLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewGraphqlLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func GraphqlLexerInit() {
	staticData := &graphqllexerLexerStaticData
	staticData.once.Do(graphqllexerLexerInit)
}

// NewGraphqlLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewGraphqlLexer(input antlr.CharStream) *GraphqlLexer {
	GraphqlLexerInit()
	l := new(GraphqlLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &graphqllexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "Graphql.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// GraphqlLexer tokens.
const (
	GraphqlLexerT__0         = 1
	GraphqlLexerT__1         = 2
	GraphqlLexerT__2         = 3
	GraphqlLexerT__3         = 4
	GraphqlLexerT__4         = 5
	GraphqlLexerT__5         = 6
	GraphqlLexerT__6         = 7
	GraphqlLexerT__7         = 8
	GraphqlLexerT__8         = 9
	GraphqlLexerT__9         = 10
	GraphqlLexerT__10        = 11
	GraphqlLexerT__11        = 12
	GraphqlLexerT__12        = 13
	GraphqlLexerT__13        = 14
	GraphqlLexerBooleanValue = 15
	GraphqlLexerNullValue    = 16
	GraphqlLexerFRAGMENT     = 17
	GraphqlLexerQUERY        = 18
	GraphqlLexerMUTATION     = 19
	GraphqlLexerSUBSCRIPTION = 20
	GraphqlLexerSCHEMA       = 21
	GraphqlLexerSCALAR       = 22
	GraphqlLexerTYPE         = 23
	GraphqlLexerINTERFACE    = 24
	GraphqlLexerIMPLEMENTS   = 25
	GraphqlLexerENUM         = 26
	GraphqlLexerUNION        = 27
	GraphqlLexerINPUT        = 28
	GraphqlLexerEXTEND       = 29
	GraphqlLexerDIRECTIVE    = 30
	GraphqlLexerON_KEYWORD   = 31
	GraphqlLexerREPEATABLE   = 32
	GraphqlLexerNAME         = 33
	GraphqlLexerIntValue     = 34
	GraphqlLexerFloatValue   = 35
	GraphqlLexerStringValue  = 36
	GraphqlLexerIgnored      = 37
)

func (l *GraphqlLexer) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 33:
		return l.IntValue_Sempred(localctx, predIndex)

	case 37:
		return l.FloatValue_Sempred(localctx, predIndex)

	case 43:
		return l.StringValue_Sempred(localctx, predIndex)

	default:
		panic("No registered predicate for: " + fmt.Sprint(ruleIndex))
	}
}

func (p *GraphqlLexer) IntValue_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return !isDigit(p.GetInputStream().LA(1)) && !isDot(p.GetInputStream().LA(1)) && !isNameStart(p.GetInputStream().LA(1))

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GraphqlLexer) FloatValue_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
		return !isDigit(p.GetInputStream().LA(1)) && !isDot(p.GetInputStream().LA(1)) && !isNameStart(p.GetInputStream().LA(1))

	case 2:
		return !isDigit(p.GetInputStream().LA(1)) && !isDot(p.GetInputStream().LA(1)) && !isNameStart(p.GetInputStream().LA(1))

	case 3:
		return !isDigit(p.GetInputStream().LA(1)) && !isDot(p.GetInputStream().LA(1)) && !isNameStart(p.GetInputStream().LA(1))

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *GraphqlLexer) StringValue_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 4:
		return p.GetInputStream().LA(1) != '"'

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
